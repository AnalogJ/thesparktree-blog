<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>blog.thesparktree.com</title>
   
   <link>https://blog.thesparktree.com</link>
   <description>Devops posts & guides about interesting tech like Docker, Letsencrypt, Chef, Angular, Automation, API's or other topics that you should know about. </description>
   <language>en-uk</language>
   <managingEditor> Jason Kulatunga</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>CapsuleCD v2 Released</title>
	  <link>/capsulecd-v2-released</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2017-08-06T04:19:33-05:00</pubDate>
	  <guid>/capsulecd-v2-released</guid>
	  <description><![CDATA[
	     <p><a href="https://github.com/AnalogJ/capsulecd">CapsuleCD</a> is made up of a series of scripts/commands that
make it easy for you to package and release a new version of your library artifact (Ruby gem, Npm package, Chef cookbook.. ) while still following best practices:</p>

<ul>
  <li>bumping <code class="language-plaintext highlighter-rouge">semvar</code> tags</li>
  <li>regenerating any <code class="language-plaintext highlighter-rouge">*.lock</code> files</li>
  <li>validates all dependencies exist and are free of vulnerabilities</li>
  <li>runs unit tests &amp; linters</li>
  <li>uploads versioned artifact to community hosting service (rubygems/supermarket/pypi/etc)</li>
  <li>creating a new git tag</li>
  <li>pushing changes back to source control &amp; creating a release</li>
  <li>and others..</li>
</ul>

<p>While <code class="language-plaintext highlighter-rouge">CapsuleCD</code> <strong>was</strong> a series of scripts, with the release of <strong>v2</strong> that’s no longer the case.</p>

<p><code class="language-plaintext highlighter-rouge">CapsuleCD</code> has been re-written, and is now available as a <a href="https://github.com/AnalogJ/capsulecd/releases">static binary</a>
on <a href="https://github.com/AnalogJ/capsulecd/releases/download/v2.0.10/capsulecd-darwin-amd64"><code class="language-plaintext highlighter-rouge">macOS</code></a> and
<a href="https://github.com/AnalogJ/capsulecd/releases/download/v2.0.10/capsulecd-linux-amd64"><code class="language-plaintext highlighter-rouge">Linux</code></a>
(<code class="language-plaintext highlighter-rouge">Windows</code> and <code class="language-plaintext highlighter-rouge">NuGet</code> support is hopefully coming soon)</p>

<p>You no longer need to worry that the version of Ruby used by your library &amp; <code class="language-plaintext highlighter-rouge">gemspec</code> is different than the
version required by <code class="language-plaintext highlighter-rouge">CapsuleCD</code>. If you maintain any Python or NodeJS libraries, this also means that a Ruby
runtime for just for CapsuleCD is unnecessary. The <code class="language-plaintext highlighter-rouge">CapsuleCD</code> <a href="https://hub.docker.com/r/analogj/capsulecd/tags/">Docker</a>
images for other languages are much slimmer, and based off the standard community images with <a href="https://github.com/AnalogJ/capsulecd-docker">minimal changes</a>.</p>

<p>Releasing a new version of your Ruby library hasn’t changed, it’s as easy as downloading the <a href="https://github.com/AnalogJ/capsulecd/releases">binary</a> and running:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CAPSULE_SCM_GITHUB_ACCESS_TOKEN=123456789ABCDEF \
CAPSULE_SCM_REPO_FULL_NAME=AnalogJ/gem_analogj_test \
CAPSULE_SCM_PULL_REQUEST=4 \
CAPSULE_RUBYGEMS_API_KEY=ASDF12345F \
capsulecd start --scm github --package_type ruby
</code></pre></div></div>

<p>Click below to watch a screencast of <code class="language-plaintext highlighter-rouge">CapuleCD</code> in action:</p>

<p align="center">
<a href="https://analogj.github.io/capsulecd">
  <img alt="CapsuleCD screencast" width="800" src="https://cdn.rawgit.com/AnalogJ/capsulecd/v2.0.10/capsulecd-screencast.png" />
  </a>
</p>

<div class="github-widget" data-repo="AnalogJ/capsulecd"></div>


	  ]]></description>
	</item>

	<item>
	  <title>Continuous Delivery for Versioned Artifacts/Libraries (Npm, Chef, Gems, Bower, Pip, etc)</title>
	  <link>/continuous-delivery-for-versioned</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2016-04-12T14:13:11-05:00</pubDate>
	  <guid>/continuous-delivery-for-versioned</guid>
	  <description><![CDATA[
	     <p>So you’re the devops/automation guy or gal on your team. You live and die by “<a href="https://memegenerator.net/instance/9449708">Automate all the things</a>”. Or maybe you just like the fact that your automated CI tests have saved you from spending hours debugging in production. That’s awesome, that’s how I got here too.</p>

<p>If I was to ask you about your production deployments, you wouldn’t hesitate to tell me about all the automation you’ve put in place. But if I ask you about your build artifacts/libraries pipeline I’d probably get a cautious look and we would have a conversation like this:</p>

<ul>
  <li><strong>Me:</strong> How do you release new versions of your Chef cookbooks?</li>
  <li><strong>You:</strong> We just bump up the version in the <code class="language-plaintext highlighter-rouge">metadata.rb</code> file and commit it.</li>
  <li><strong>Me:</strong> But you test it right?</li>
  <li><strong>You:</strong> Oh we have a full CI pipeline for it, every commit is tested.</li>
  <li><strong>Me:</strong> What about handling the version number embedded in your <code class="language-plaintext highlighter-rouge">Berksfile.lock</code>?</li>
  <li><strong>You:</strong> Right. We update that by running <code class="language-plaintext highlighter-rouge">berks install</code> after we bump up the version. Then we commit, and push it to Github.</li>
  <li><strong>Me:</strong> Do you do dependency checking? Lint your cookbook syntax? Run code coverage tools in addition to standard CI?</li>
  <li><strong>You:</strong> Oh we have a pretty simple/general purpose CI script, never got around to setting those up.</li>
  <li><strong>Me:</strong> What about actual releases? How do you get your new cookbook version into the community repo (Supermarket) or your Chef Server?</li>
  <li><strong>You:</strong> We use <code class="language-plaintext highlighter-rouge">knife upload</code> or <code class="language-plaintext highlighter-rouge">berks upload</code>. Or maybe its <code class="language-plaintext highlighter-rouge">knife cookbook upload</code>. Something like that.</li>
  <li><strong>Me:</strong> And then you create a git tag and push that to Github too right?</li>
  <li><strong>You:</strong> uhhh.. Of course.</li>
  <li><strong>Me:</strong> Do you update a <code class="language-plaintext highlighter-rouge">CHANGELOG.md</code> with a list of the changes between versions?</li>
  <li><strong>You:</strong> Sometimes, if its a big enough change.</li>
</ul>

<p>This is obviously a very pointed example thats specific to Chef cookbooks, but versioning and releasing your library (written in any language) is just as important as releasing your actual application software. It can be hard to remember all the steps required, especially for more mature libraries which you don’t update very often. This makes it perfect for automating.</p>

<h2 id="capsulecd-infomercial">CapsuleCD Infomercial</h2>

<p><a href="https://github.com/AnalogJ/capsulecd">CapsuleCD</a> is a generic Continuous Delivery pipeline for versioned artifacts and libraries. Don’t worry, I’m not trying to convince you to throw away all your CI scripts and replace your Jenkins server. <a href="https://github.com/AnalogJ/capsulecd">CapsuleCD</a> is meant to work with your existing CI, not complete with it. It’s goal is to bring automation to the packaging and deployment stage of your library release cycle.
Depending how you set it up (and how much you trust your Unit Tests), every Pull Request could automatically start CapsuleCD to generate a new release of your library (Continuous Deployment) or just notify Ops to kick off CapsuleCD (Continuous Delivery).</p>

<div class="github-widget" data-repo="AnalogJ/capsulecd"></div>

<h2 id="hows-it-work">How’s it work?</h2>

<p><a href="https://github.com/AnalogJ/capsulecd">CapsuleCD</a> is configurable CLI application which can be heavily customized. It can support package/release management for libraries written in any language, but comes with built-in support for the following languages:</p>

<ul>
  <li>Javascript (Bower)</li>
  <li>Node (Npm)</li>
  <li>Ruby (Gem)</li>
  <li>Chef (Cookbooks)</li>
  <li>Python (Pip)</li>
</ul>

<p>Like Docker, <a href="https://github.com/AnalogJ/capsulecd">CapsuleCD</a> follows the ideology of “batteries included but removable”. Every supported language has a base release pipeline that’s designed to follow the best practices of that language. This includes things like:</p>

<ul>
  <li>automatically bumping the semvar version number</li>
  <li>regenerating any <code class="language-plaintext highlighter-rouge">*.lock</code> files/ shrinkwrap files with new version</li>
  <li>creating any recommended files (eg. <code class="language-plaintext highlighter-rouge">.gitignore</code>)</li>
  <li>validates all dependencies exist (by vendoring locally)</li>
  <li>running unit tests</li>
  <li>source minification</li>
  <li>linting library syntax</li>
  <li>generating code coverage reports</li>
  <li>updating changelog</li>
  <li>uploading versioned artifact to community hosting service (rubygems/supermarket/pypi/etc)</li>
  <li>creating a new git tag and pushing changes back to source control (github)</li>
  <li>creating a new release in source control (github) and attaching any common artifacts</li>
</ul>

<p>As you can see, some steps are only applicable for some languages and not others. Other steps only make sense for public libraries, like uploading them to the community repos. As mentioned earlier, every step listed is configurable, extendable and can be completely overridden if needed.</p>

<h2 id="cavaets">Cavaets</h2>

<p>While <a href="https://github.com/AnalogJ/capsulecd">CapsuleCD</a> is very flexible, it’s a bit opinionated. It’s built around Git but only supports Github right now (adding GitLab and Bitbucket support has been left as a community exercise, or if enough people request it). It also works best when paired with a CI server.</p>

<p>I’d also recommend that you run <a href="https://github.com/AnalogJ/capsulecd">CapsuleCD</a> inside a Docker container, so you don’t have to worry about accidentally clobbering your system pip/ruby/cookbook cache between runs. But this won’t be a problem once <a href="https://github.com/AnalogJ/capsulecd/issues/25">vendoring support</a> is added, something that’s at the top of the to-do list.</p>

<p><a href="https://github.com/AnalogJ/capsulecd">CapsuleCD</a> was designed around the premise that pull requests precede releasing a new version, but you can also create a release manually from the HEAD of the default branch.</p>

<h2 id="how-do-i-wire-it-up">How do I wire it up?</h2>

<p>Using <a href="https://github.com/AnalogJ/capsulecd">CapsuleCD</a> is as easy as:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>capsulecd
<span class="nv">CAPSULE_SOURCE_GITHUB_ACCESS_TOKEN</span><span class="o">=</span>1234567890ABCDEF <span class="se">\</span>
<span class="nv">CAPSULE_RUNNER_REPO_FULL_NAME</span><span class="o">=</span>AnalogJ/lexicon <span class="se">\</span>
<span class="nv">CAPSULE_RUNNER_PULL_REQUEST</span><span class="o">=</span>10 <span class="se">\</span>
capsulecd start <span class="nt">--source</span> github <span class="nt">--package_type</span> python
</code></pre></div></div>
<p>or with Docker</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker pull AnalogJ/capsulecd:python
docker run <span class="nt">-e</span> <span class="s2">"CAPSULE_SOURCE_GITHUB_ACCESS_TOKEN=1234567890ABCDEF"</span> <span class="se">\</span>
<span class="nt">-e</span> <span class="s2">"CAPSULE_RUNNER_REPO_FULL_NAME=AnalogJ/lexicon"</span> <span class="se">\</span>
<span class="nt">-e</span> <span class="s2">"CAPSULE_RUNNER_PULL_REQUEST=10"</span> <span class="se">\</span>
AnalogJ/capsulecd:python <span class="se">\</span>
capsulecd start <span class="nt">--source</span> github <span class="nt">--package_type</span> python
</code></pre></div></div>

<p>Basically what you’re doing is specifying the <code class="language-plaintext highlighter-rouge">GITHUB_ACCESS_TOKEN</code> for the automation user who will be pulling the source from Github, bumping the version, making any code changes, tagging the new version and pushing back to Github.
The <code class="language-plaintext highlighter-rouge">REPO_FULL_NAME</code> environmental variable is used to specify the repo we’re processing.
The <code class="language-plaintext highlighter-rouge">PULL_REQUEST</code> number tells <a href="https://github.com/AnalogJ/capsulecd">CapsuleCD</a> which branch to process and create a new release from.</p>

<h2 id="ugh-ruby-my-library-is-written-in-golispjavascriptpythonetc">Ugh, Ruby? My library is written in Go/Lisp/Javascript/Python/etc.</h2>

<p>To be honest, <a href="https://github.com/AnalogJ/capsulecd">CapsuleCD</a> isn’t meant for library developers, its meant for the Ops/Devops team members that maintain the releases. Ruby is a powerful language, and the most popular configuration management tools (Puppet/Chef) are written in Ruby, which means it’s one less language that your Ops guys need to learn (because who really wants to do package management in Lisp).</p>

<h2 id="all-our-rubygems-are-private-how-do-i-override-the-publish-step-to-point-to-our-private-gem-server">All our Rubygems are private, how do I override the publish step to point to our private Gem server?</h2>

<p>Check out the <a href="https://github.com/AnalogJ/capsulecd/blob/master/README.md#step-prepost-hooks-and-overrides">Step pre/post hooks and override</a> section of the README.md</p>

<div class="github-widget" data-repo="AnalogJ/capsulecd"></div>

	  ]]></description>
	</item>

	<item>
	  <title>I Built That - 2015</title>
	  <link>/i-built-that-2015</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2016-01-17T02:37:54-06:00</pubDate>
	  <guid>/i-built-that-2015</guid>
	  <description><![CDATA[
	     <p>Its 2016 now, and like many others, I thought it would be a good idea to review my accomplisments in the last year. Like most devs, I find myself scratching that itch to build by hacking on side projects in my free time.</p>

<p>After looking though my projects in the last year, it’s pretty obvious that I’m missing on the follow-through to completion, and I <strong>HATE</strong> doing documentation. Both flaws I’ll have to focus on in the new year.</p>

<p>This is a list of open source projects that I worked on in 2015.</p>

<h1 id="filefog">Filefog</h1>

<p><a href="https://github.com/filefog/filefog">Filefog</a> is a Nodejs library that lets you run common commands against popular cloud storage providers (like dropbox, google drive, microsoft onedrive) in an agnostic way.</p>

<ul>
  <li><strong>Source</strong>: <a href="https://github.com/filefog/filefog">https://github.com/filefog/filefog</a></li>
  <li><strong>Language</strong>: Nodejs (Javascript)</li>
  <li><strong>Status</strong>: Mostly Complete - Requires documentation</li>
</ul>

<div class="github-widget" data-repo="filefog/filefog"></div>

<h1 id="kickback">Kickback</h1>

<p><a href="https://github.com/AnalogJ/kickback">Kickback</a> is a Google Spreadsheet Addon/Wizard that lets you easily split trip/travel expenses between friends.</p>

<ul>
  <li><strong>Source</strong>: <a href="https://github.com/AnalogJ/kickback">https://github.com/AnalogJ/kickback</a></li>
  <li><strong>Language</strong>: Google Apps Script (Javascript)</li>
  <li><strong>Status</strong>: Mostly Complete - Requires app store submission</li>
</ul>

<div class="github-widget" data-repo="AnalogJ/kickback"></div>

<h1 id="goodreadsjs">Goodreads.js</h1>

<p><a href="https://github.com/AnalogJ/goodreads.js">Goodreads.js</a> is a Nodejs library that wraps the (terrible) Goodreads API.</p>

<ul>
  <li><strong>Source</strong>: https://github.com/AnalogJ/goodreads.js</li>
  <li><strong>Language</strong>: Nodejs (Javascript)</li>
  <li><strong>Status</strong>: Mostly Complete - Requires documentation</li>
</ul>

<div class="github-widget" data-repo="AnalogJ/goodreads.js"></div>

<h1 id="tomecast">Tomecast</h1>

<p><a href="https://www.tomecast.com">Tomecast</a> automatically transcribes some of the most popular podcasts (using Google Speech API and Microsoft Project Oxford) and generates a searchable website.</p>

<ul>
  <li><strong>Link</strong>: <a href="https://www.tomecast.com">https://www.tomecast.com</a></li>
  <li><strong>Source</strong>: <a href="https://github.com/tomecast">https://github.com/tomecast</a></li>
  <li><strong>Language</strong>: Ruby</li>
  <li><strong>Status</strong>: In-Progress - Transcription stopped.</li>
</ul>

<div class="github-widget" data-repo="AnalogJ/goodreads.js"></div>

<h1 id="quietthyme">QuietThyme</h1>

<p><a href="https://www.quietthyme.com">QuietThyme</a> is a plugin for Calibre which allows you to access your cloud storage as a library in Calibre, allowing you to add and remove books with ease. Quietthyme also generates an OPDS catalog for your library in the cloud, allowing you to access your books at any time, from any device.</p>

<ul>
  <li><strong>Link</strong>: <a href="https://www.quietthyme.com">https://www.quietthyme.com</a></li>
  <li><strong>Source</strong>: <a href="https://github.com/AnalogJ/quietthyme.plugin">https://github.com/AnalogJ/quietthyme.plugin</a></li>
  <li><strong>Language</strong>: Python</li>
  <li><strong>Status</strong>: Hosting down</li>
</ul>

<div class="github-widget" data-repo="AnalogJ/quietthyme.plugin"></div>

<h1 id="banditio">Bandit.io</h1>

<p><a href="https://www.bandit.io">Bandit.io</a> is a Docker based man-in-the-middle proxy + website that lets you debug all http and https requests and responses on remote devices. Its basically like Charles and Fiddler, but without requiring the debugged device to be on the local network. Its also built ontop of the Chrome Remote Debugging Protocol, meaning the ui looks like the Chrome developer tools.</p>

<ul>
  <li><strong>Link</strong>: <a href="http://www.bandit.io">https://www.bandit.io</a></li>
  <li><strong>Source</strong>: <a href="https://github.com/AnalogJ/banditio.engine">https://github.com/AnalogJ/banditio.engine</a></li>
  <li><strong>Language</strong>: Python</li>
  <li><strong>Status</strong>: In-Progress - Requires documentation and hosting</li>
</ul>

<div class="github-widget" data-repo="AnalogJ/banditio.engine"></div>

<h1 id="capsulecd">CapsuleCD</h1>

<p><a href="https://github.com/AnalogJ/capsulecd">CapsuleCD</a> is a set of platform agnostic Continuous Delivery scripts for automating package releases (npm, cookbooks, gems, pip, jars, etc).</p>

<ul>
  <li><strong>Source</strong>: <a href="https://github.com/AnalogJ/capsulecd">https://github.com/AnalogJ/capsulecd</a></li>
  <li><strong>Language</strong>: Ruby</li>
  <li><strong>Status</strong>: Incomplete</li>
</ul>

<div class="github-widget" data-repo="AnalogJ/capsulecd"></div>

<h1 id="mediadepot">MediaDepot</h1>

<p><a href="https://github.com/mediadepot">MediaDepot</a> is Docker based self-hosted media server with the following capabilities:</p>

<ol>
  <li>Some form of JBOD disk storage (most likely greyhole as that’s what I’m currently using)</li>
  <li>Media server applications such as plex, sickbeard, couchpotato, etc to manage and view media</li>
  <li>Utility applications such as ajenti, openvpn, conky, btsync, bittorrent, vnc.</li>
  <li>Notifications system (so that you are notified whenever any service stops or starts, and when media is added)</li>
</ol>

<ul>
  <li><strong>Source</strong>: <a href="https://github.com/mediadepot">https://github.com/mediadepot</a></li>
  <li><strong>Language</strong>: Docker + Chef</li>
  <li><strong>Status</strong>: Incomplete</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Python Fails - Multipart file uploads in Python</title>
	  <link>/the-unfortunately-long-story-dealing-with</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2015-03-19T14:38:13-05:00</pubDate>
	  <guid>/the-unfortunately-long-story-dealing-with</guid>
	  <description><![CDATA[
	     <p>Python: Its a scripting language you can basically do anything with. Err.. most things, some are a real pain in the ass out of the box.</p>

<p>Before we start, a caveat. I’m working with Python 2.7, if you’re using Python 3.x, you may be able to use <code class="language-plaintext highlighter-rouge">urllib3</code>, which I’ve heard good things about. If you’re too lazy to look into it, the code I include below should still work for you.</p>

<p>I found myself needing to upload a file via Python. Like any <strike>expert</strike> developer I began searching the compendium of human knowledge that is StackOverflow.</p>

<p>I found many results, all of which looked promising at first glance.</p>

<ul>
  <li><a href="https://stackoverflow.com/questions/680305/using-multipartposthandler-to-post-form-data-with-python">Using MultipartPostHandler to POST form-data with Python</a></li>
  <li><a href="https://stackoverflow.com/questions/68477/send-file-using-post-from-a-python-script">Send file using POST from a Python script</a></li>
  <li><a href="https://stackoverflow.com/questions/12385179/how-to-send-a-multipart-form-data-with-requests-in-python">How to send a “multipart/form-data” with requests in python?</a></li>
</ul>

<p>I quickly realized that almost all questions referenced the incredible <a href="https://docs.python-requests.org/en/latest/">“requests”</a> , <a href="http://atlee.ca/software/poster/">“poster”</a> or other third party modules. While any sane developer would just bask in their single handed victory and then start on the next item of their to-do list, I’m a glutton for punishment. I needed to do my multipart upload like a real <strike>man</strike> developer: python standard libraries only.</p>

<p>Luckily I was able to find a simple looking snippet that only used <a href="http://code.activestate.com/recipes/146306-http-client-to-post-using-multipartform-data/">urllib2</a> something I was familiar with. Huzzah! With a few test files in hand, I began testing my shiny new script. Alas it was all for naught, the multipart upload script would only work for some files, and would fail horribly for others.</p>

<p>The error message I was getting <code class="language-plaintext highlighter-rouge">UnicodeDecodeError: 'utf8' codec can't decode byte 0x8d in position 516: invalid start byte</code> helped clue me into the fact that the files that failed were binary files rather than simple text documents. It seems the simple script was concatenating the file data directly into a string, at which point my binary files threw up. Ah the joys of file encoding.</p>

<p>I tried a quick and proven fix: when in doubt, force “utf-8”. As the <code class="language-plaintext highlighter-rouge">open</code> command doesn’t allow us to force encoding, I switched to using the built-in <code class="language-plaintext highlighter-rouge">codecs</code> module. I tried a few different file encodings before doing a naive search for <a href="https://programmers.stackexchange.com/questions/187169/how-to-detect-the-encoding-of-a-file">“How to detect the encoding of a file”</a> at which point I felt like a real idiot as I saw the answer:</p>
<blockquote>
  <p>Files generally indicate their encoding with a file header. … However, even reading the header you can never be sure what encoding a file is really using.</p>
</blockquote>

<p>Great, back to square one.</p>

<p>The most obvious solution was to rewrite the uploader script so that it used a binary buffer to store the file data, something that would be much more intelligent. I quickly hacked together a quick version of the file uploader script, but made sure to use <code class="language-plaintext highlighter-rouge">BytesIO</code> to store the form data, rather than joining all the data into a string. Again, no joy. Now I was getting the same error, but deep inside the <code class="language-plaintext highlighter-rouge">urllib2</code> function. Ugh, that means that internally <code class="language-plaintext highlighter-rouge">urllib2</code> is converting my beautiful binary buffer into a string. Son of a.</p>

<p>Screw it. I’ll just rewrite it using <code class="language-plaintext highlighter-rouge">http</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">mimetools</span>
<span class="kn">import</span> <span class="n">mimetypes</span>
<span class="kn">import</span> <span class="n">io</span>
<span class="kn">import</span> <span class="n">http</span>
<span class="kn">import</span> <span class="n">json</span>


<span class="n">form</span> <span class="o">=</span> <span class="nc">MultiPartForm</span><span class="p">()</span>
<span class="n">form</span><span class="p">.</span><span class="nf">add_field</span><span class="p">(</span><span class="sh">"</span><span class="s">form_field</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">my awesome data</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># Add a fake file
</span><span class="n">form</span><span class="p">.</span><span class="nf">add_file</span><span class="p">(</span><span class="n">key</span><span class="p">,</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">basename</span><span class="p">(</span><span class="n">filepath</span><span class="p">),</span>
	<span class="n">fileHandle</span><span class="o">=</span><span class="n">codecs</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">/path/to/my/file.zip</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">rb</span><span class="sh">"</span><span class="p">))</span>

<span class="c1"># Build the request
</span><span class="n">url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">http://www.example.com/endpoint</span><span class="sh">"</span>
<span class="n">schema</span><span class="p">,</span> <span class="n">netloc</span><span class="p">,</span> <span class="n">url</span><span class="p">,</span> <span class="n">params</span><span class="p">,</span> <span class="n">query</span><span class="p">,</span> <span class="n">fragments</span> <span class="o">=</span> <span class="n">urlparse</span><span class="p">.</span><span class="nf">urlparse</span><span class="p">(</span><span class="n">url</span><span class="p">)</span>

<span class="k">try</span><span class="p">:</span>
	<span class="n">form_buffer</span> <span class="o">=</span>  <span class="n">form</span><span class="p">.</span><span class="nf">get_binary</span><span class="p">().</span><span class="nf">getvalue</span><span class="p">()</span>
	<span class="n">http</span> <span class="o">=</span> <span class="n">httplib</span><span class="p">.</span><span class="nc">HTTPConnection</span><span class="p">(</span><span class="n">netloc</span><span class="p">)</span>
	<span class="n">http</span><span class="p">.</span><span class="nf">connect</span><span class="p">()</span>
	<span class="n">http</span><span class="p">.</span><span class="nf">putrequest</span><span class="p">(</span><span class="sh">"</span><span class="s">POST</span><span class="sh">"</span><span class="p">,</span> <span class="n">url</span><span class="p">)</span>
	<span class="n">http</span><span class="p">.</span><span class="nf">putheader</span><span class="p">(</span><span class="sh">'</span><span class="s">Content-type</span><span class="sh">'</span><span class="p">,</span><span class="n">form</span><span class="p">.</span><span class="nf">get_content_type</span><span class="p">())</span>
	<span class="n">http</span><span class="p">.</span><span class="nf">putheader</span><span class="p">(</span><span class="sh">'</span><span class="s">Content-length</span><span class="sh">'</span><span class="p">,</span> <span class="nf">str</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">form_buffer</span><span class="p">)))</span>
	<span class="n">http</span><span class="p">.</span><span class="nf">endheaders</span><span class="p">()</span>
	<span class="n">http</span><span class="p">.</span><span class="nf">send</span><span class="p">(</span><span class="n">form_buffer</span><span class="p">)</span>
<span class="k">except</span> <span class="n">socket</span><span class="p">.</span><span class="n">error</span><span class="p">,</span> <span class="n">e</span><span class="p">:</span>
	<span class="k">raise</span> <span class="nc">SystemExit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="n">r</span> <span class="o">=</span> <span class="n">http</span><span class="p">.</span><span class="nf">getresponse</span><span class="p">()</span>
<span class="k">if</span> <span class="n">r</span><span class="p">.</span><span class="n">status</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
	<span class="k">return</span> <span class="n">json</span><span class="p">.</span><span class="nf">loads</span><span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="nf">read</span><span class="p">())</span>
<span class="k">else</span><span class="p">:</span>
	<span class="nf">print</span><span class="p">(</span><span class="sh">'</span><span class="s">Upload failed (%s): %s</span><span class="sh">'</span> <span class="o">%</span> <span class="p">(</span><span class="n">r</span><span class="p">.</span><span class="n">status</span><span class="p">,</span> <span class="n">r</span><span class="p">.</span><span class="n">reason</span><span class="p">))</span>

<span class="k">class</span> <span class="nc">MultiPartForm</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
	<span class="sh">"""</span><span class="s">Accumulate the data to be used when posting a form.</span><span class="sh">"""</span>

	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
		<span class="n">self</span><span class="p">.</span><span class="n">form_fields</span> <span class="o">=</span> <span class="p">[]</span>
		<span class="n">self</span><span class="p">.</span><span class="n">files</span> <span class="o">=</span> <span class="p">[]</span>
		<span class="n">self</span><span class="p">.</span><span class="n">boundary</span> <span class="o">=</span> <span class="n">mimetools</span><span class="p">.</span><span class="nf">choose_boundary</span><span class="p">()</span>
		<span class="k">return</span>

	<span class="k">def</span> <span class="nf">get_content_type</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
		<span class="k">return</span> <span class="sh">'</span><span class="s">multipart/form-data; boundary=%s</span><span class="sh">'</span> <span class="o">%</span> <span class="n">self</span><span class="p">.</span><span class="n">boundary</span>

	<span class="k">def</span> <span class="nf">add_field</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
		<span class="sh">"""</span><span class="s">Add a simple field to the form data.</span><span class="sh">"""</span>
		<span class="n">self</span><span class="p">.</span><span class="n">form_fields</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">name</span><span class="p">,</span> <span class="n">value</span><span class="p">))</span>
		<span class="k">return</span>

	<span class="k">def</span> <span class="nf">add_file</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">fieldname</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">fileHandle</span><span class="p">,</span> <span class="n">mimetype</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
		<span class="sh">"""</span><span class="s">Add a file to be uploaded.</span><span class="sh">"""</span>
		<span class="n">body</span> <span class="o">=</span> <span class="n">fileHandle</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
		<span class="k">if</span> <span class="n">mimetype</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
			<span class="n">mimetype</span> <span class="o">=</span> <span class="n">mimetypes</span><span class="p">.</span><span class="nf">guess_type</span><span class="p">(</span><span class="n">filename</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">or</span> <span class="sh">'</span><span class="s">application/octet-stream</span><span class="sh">'</span>
		<span class="n">self</span><span class="p">.</span><span class="n">files</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">fieldname</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">mimetype</span><span class="p">,</span> <span class="n">body</span><span class="p">))</span>
		<span class="k">return</span>

	<span class="k">def</span> <span class="nf">get_binary</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
		<span class="sh">"""</span><span class="s">Return a binary buffer containing the form data, including attached files.</span><span class="sh">"""</span>
		<span class="n">part_boundary</span> <span class="o">=</span> <span class="sh">'</span><span class="s">--</span><span class="sh">'</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">boundary</span>

		<span class="n">binary</span> <span class="o">=</span> <span class="n">io</span><span class="p">.</span><span class="nc">BytesIO</span><span class="p">()</span>
		<span class="n">needsCLRF</span> <span class="o">=</span> <span class="bp">False</span>
		<span class="c1"># Add the form fields
</span>		<span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">form_fields</span><span class="p">:</span>
			<span class="k">if</span> <span class="n">needsCLRF</span><span class="p">:</span>
				<span class="n">binary</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">'</span><span class="se">\r\n</span><span class="sh">'</span><span class="p">)</span>
			<span class="n">needsCLRF</span> <span class="o">=</span> <span class="bp">True</span>

			<span class="n">block</span> <span class="o">=</span> <span class="p">[</span><span class="n">part_boundary</span><span class="p">,</span>
			  <span class="sh">'</span><span class="s">Content-Disposition: form-data; name=</span><span class="sh">"</span><span class="s">%s</span><span class="sh">"'</span> <span class="o">%</span> <span class="n">name</span><span class="p">,</span>
			  <span class="sh">''</span><span class="p">,</span>
			  <span class="n">value</span>
			<span class="p">]</span>
			<span class="n">binary</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">'</span><span class="se">\r\n</span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">block</span><span class="p">))</span>

		<span class="c1"># Add the files to upload
</span>		<span class="k">for</span> <span class="n">field_name</span><span class="p">,</span> <span class="n">filename</span><span class="p">,</span> <span class="n">content_type</span><span class="p">,</span> <span class="n">body</span> <span class="ow">in</span> <span class="n">self</span><span class="p">.</span><span class="n">files</span><span class="p">:</span>
			<span class="k">if</span> <span class="n">needsCLRF</span><span class="p">:</span>
				<span class="n">binary</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">'</span><span class="se">\r\n</span><span class="sh">'</span><span class="p">)</span>
			<span class="n">needsCLRF</span> <span class="o">=</span> <span class="bp">True</span>

			<span class="n">block</span> <span class="o">=</span> <span class="p">[</span><span class="n">part_boundary</span><span class="p">,</span>
			  <span class="nf">str</span><span class="p">(</span><span class="sh">'</span><span class="s">Content-Disposition: file; name=</span><span class="sh">"</span><span class="s">%s</span><span class="sh">"</span><span class="s">; filename=</span><span class="sh">"</span><span class="s">%s</span><span class="sh">"'</span> <span class="o">%</span> \
			  <span class="p">(</span><span class="n">field_name</span><span class="p">,</span> <span class="n">filename</span><span class="p">)),</span>
			  <span class="sh">'</span><span class="s">Content-Type: %s</span><span class="sh">'</span> <span class="o">%</span> <span class="n">content_type</span><span class="p">,</span>
			  <span class="sh">''</span>
			  <span class="p">]</span>
			<span class="n">binary</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">'</span><span class="se">\r\n</span><span class="sh">'</span><span class="p">.</span><span class="nf">join</span><span class="p">(</span><span class="n">block</span><span class="p">))</span>
			<span class="n">binary</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">'</span><span class="se">\r\n</span><span class="sh">'</span><span class="p">)</span>
			<span class="n">binary</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="n">body</span><span class="p">)</span>


		<span class="c1"># add closing boundary marker,
</span>		<span class="n">binary</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">'</span><span class="se">\r\n</span><span class="s">--</span><span class="sh">'</span> <span class="o">+</span> <span class="n">self</span><span class="p">.</span><span class="n">boundary</span> <span class="o">+</span> <span class="sh">'</span><span class="s">--</span><span class="se">\r\n</span><span class="sh">'</span><span class="p">)</span>
		<span class="k">return</span> <span class="n">binary</span>
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
