<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>blog.thesparktree.com</title>
   
   <link>https://blog.thesparktree.com</link>
   <description>Devops posts & guides about interesting tech like Docker, Letsencrypt, Chef, Angular, Automation, API's or other topics that you should know about. </description>
   <language>en-uk</language>
   <managingEditor> Jason Kulatunga</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Go - Serverless Framework - Newrelic</title>
	  <link>/go-serverless-framework-newrelic</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2024-01-21T03:19:33-06:00</pubDate>
	  <guid>/go-serverless-framework-newrelic</guid>
	  <description><![CDATA[
	     <p>Because I seem to be a glutton for punishment, I decided to build an API for <a href="https://www.fastenhealth.com/">my startup Fasten Health</a> using Go + Serverless Framework + 
Newrelic. As expected this was difficult for a number of reasons:</p>

<ul>
  <li>Go is not a first class citizen in the Serverless Framework ecosystem. While it is supported, it is not as well documented as NodeJS.</li>
  <li>Newrelic’s AWS Lambda integration has gone through multiple iterations, and their documentation is not clear what is the “best” way to integrate.
    <ul>
      <li>Newrelic’s CloudWatch integration has been deprecated and replaced with a Lambda Layer.</li>
      <li>The Lambda layer integration <a href="https://github.com/newrelic/serverless-newrelic-lambda-layers/issues/334">requires code changes in Go, unlike the NodeJS, Python and other integrations</a></li>
      <li>The Lambda layer integration only works with the new <a href="https://aws.amazon.com/blogs/compute/migrating-aws-lambda-functions-from-the-go1-x-runtime-to-the-custom-runtime-on-amazon-linux-2/">Amazon Linux 2023 <code class="language-plaintext highlighter-rouge">provided</code> runtime</a> instead of the older but more commonly used <code class="language-plaintext highlighter-rouge">go1.x</code> runtime.</li>
    </ul>
  </li>
  <li>The Amazon Linux 2023 <code class="language-plaintext highlighter-rouge">provided</code> runtime has a requirement that the entrypoint binary is named <code class="language-plaintext highlighter-rouge">bootstrap</code>. This is difficult to do natively with the Serverless Framework, and requires a custom plugin]()</li>
  <li>There is no “agentless” integration for Newrelic. You must install the Newrelic agent in your Lambda function, and then configure your app/code to send data to Newrelic.</li>
</ul>

<p>Since there doesn’t seem to be much public documentation for how to get everything working correctly, I’ve documented my process below.</p>

<div class="github-widget" data-repo="AnalogJ/newrelic-serverless-go-playground"></div>

<h2 id="1-linking-aws--newrelic">1. Linking AWS &amp; Newrelic</h2>

<p>The Newrelic documentation for <a href="https://docs.newrelic.com/docs/serverless-function-monitoring/aws-lambda-monitoring/enable-lambda-monitoring/account-linking/">linking your AWS account</a> is pretty thorough,
however the “Linking accounts manually” alternative method was completely broken for me.</p>

<p>While I was unhappy installing another tool on my dev machine, the <code class="language-plaintext highlighter-rouge">newrelic-lambda</code> cli tool worked perfectly.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>newrelic-lambda integrations <span class="nb">install</span> <span class="nt">--nr-account-id</span> YOUR_NR_ACCOUNT_ID <span class="se">\</span>
    <span class="nt">--nr-api-key</span> YOUR_NEW_RELIC_USER_KEY
</code></pre></div></div>

<p>Here’s how you get the Account ID and User Key for use with the CLI:</p>

<ul>
  <li><a href="https://docs.newrelic.com/docs/accounts/install-new-relic/account-setup/account-id/">YOUR_NR_ACCOUNT_ID</a>
    <ul>
      <li>From one.newrelic.com, click the user menu, and then go to: Administration &gt; Access management &gt; Accounts to see account IDs.</li>
    </ul>
  </li>
  <li><a href="https://docs.newrelic.com/docs/apis/intro-apis/new-relic-api-keys/">YOUR_NEW_RELIC_USER_KEY</a>
    <ul>
      <li>Create and manage your API keys from the <a href="https://one.newrelic.com/launcher/api-keys-ui.api-keys-launcher">API keys UI page</a> so you can start observing your data right away</li>
      <li>NOTE: You must select a <code class="language-plaintext highlighter-rouge">USER</code> key, not an <code class="language-plaintext highlighter-rouge">INGEST - *</code> key, otherwise you’ll get an error when attemping to link your account.</li>
    </ul>
  </li>
</ul>

<p>Immediately after this step, you should be able to see your AWS account listed in the Newrelic UI. The <code class="language-plaintext highlighter-rouge">newrelic-lambda</code> cli tool will also 
create a <code class="language-plaintext highlighter-rouge">NEW_RELIC_LICENSE_KEY</code> secret in your AWS Secrets Manager, which is used by the Newrelic Lambda Layer.</p>

<blockquote>
  <p>NOTE: if all you care about is invocation and error metrics, you can stop here. The AWS Integration will allow you to see invocation and error metrics in Newrelic, but you won’t be able to see any custom metrics, logs or traces.
The following steps are required if you would like to see this additional telemetry in Newrelic.</p>
</blockquote>

<h2 id="2-serverless-framework---golang-plugin">2. Serverless Framework - Golang Plugin</h2>

<p>The first change we need to make to our Serverless Framework configuration is to add the <a href="https://github.com/mthenw/serverless-go-plugin">Serverless Framework Golang Plugin</a>.</p>

<p>This plugin allows us to build our Go binaries, and and is compatible with the Amazon Linux 2023 <code class="language-plaintext highlighter-rouge">provided</code> runtime which is required for the Newrelic Lambda Layer.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">serverless-go-plugin</span>
<span class="nn">...</span>

<span class="na">custom</span><span class="pi">:</span>
  <span class="na">go</span><span class="pi">:</span>
    <span class="na">baseDir</span><span class="pi">:</span> <span class="s">.</span>
    <span class="na">binDir</span><span class="pi">:</span> <span class="s">bin</span>
    <span class="na">cgo</span><span class="pi">:</span> <span class="m">0</span>
    <span class="c1"># compile command, make sure GOOS and GOARCH are set correctly</span>
    <span class="na">cmd</span><span class="pi">:</span> <span class="s">GOARCH=amd64 GOOS=linux go build -ldflags="-s -w"</span>
    <span class="c1"># the plugin compiles a function only if runtime is declared here (either on function or provider level)</span>
    <span class="na">supportedRuntimes</span><span class="pi">:</span> <span class="pi">[</span><span class="s2">"</span><span class="s">provided.al2"</span><span class="pi">]</span>
    <span class="c1"># builds and archive function with only single "bootstrap" binary, required for `provided.al2` and `provided` runtime</span>
    <span class="na">buildProvidedRuntimeAsBootstrap</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div>

<h2 id="3-serverless-framework---newrelic-lambda-layer-plugin">3. Serverless Framework - Newrelic Lambda Layer Plugin</h2>

<p>Next, we need to add the <a href="https://github.com/newrelic/serverless-newrelic-lambda-layers">Serverless Framework Newrelic Lambda Layer Plugin</a></p>

<p>This plugin allows us to add the Newrelic Lambda Layer to our function, which contains a Newrelic agent that our Newrelic <code class="language-plaintext highlighter-rouge">go-agent</code> sdk will use send data to Newrelic.</p>

<p>We need to install the Serverless plugin, specify the <code class="language-plaintext highlighter-rouge">provider</code> runtime and then specify the configuration.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">accountId</code> - this is the <code class="language-plaintext highlighter-rouge">YOUR_NR_ACCOUNT_ID</code> value from Step 1</li>
  <li><code class="language-plaintext highlighter-rouge">apiKey</code> - this is the <code class="language-plaintext highlighter-rouge">YOUR_NEW_RELIC_USER_KEY</code> value from Step 1</li>
</ul>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">serverless-newrelic-lambda-layers</span>
<span class="nn">...</span>

<span class="na">provider</span><span class="pi">:</span>
  <span class="na">name</span><span class="pi">:</span> <span class="s">aws</span>
  <span class="na">runtime</span><span class="pi">:</span> <span class="s">provided.al2</span>

<span class="na">custom</span><span class="pi">:</span>
  <span class="na">newRelic</span><span class="pi">:</span>
    <span class="na">accountId</span><span class="pi">:</span> <span class="s">YOUR_NR_ACCOUNT_ID</span>
    <span class="na">apiKey</span><span class="pi">:</span> <span class="s">YOUR_NEW_RELIC_USER_KEY</span>
    <span class="na">debug</span><span class="pi">:</span> <span class="kc">true</span>

</code></pre></div></div>

<h2 id="4-serverless-framework---iam-role--iam-roles-per-function">4. Serverless Framework - IAM Role &amp; IAM Roles Per Function</h2>

<p>While the steps above are documented in various locations on the internet, it wasn’t clear to me that the Newrelic Lambda Layer seems to require a AWS Secret Manager integration
to retrieve the Newrelic License Key. Initially, I tried manually specifying the key using <code class="language-plaintext highlighter-rouge">newrelic.ConfigLicense(os.Getenv("NEW_RELIC_LICENSE_KEY"))</code> to configure the Newrelic <code class="language-plaintext highlighter-rouge">go-agent</code> sdk, but that didn’t work.
The solution was to specify the an IAM Role for the Serverless function, giving it permissions to AWS Secret Manager to pull the <code class="language-plaintext highlighter-rouge">NEW_RELIC_LICENSE_KEY</code> secret.</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">serverless-iam-roles-per-function</span>

<span class="nn">...</span>

<span class="na">functions</span><span class="pi">:</span>
  <span class="na">healthcheck</span><span class="pi">:</span>
    <span class="na">handler</span><span class="pi">:</span> <span class="s">cmd/health/health.go</span>
    <span class="na">iamRoleStatements</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">Effect</span><span class="pi">:</span> <span class="s2">"</span><span class="s">Allow"</span>
        <span class="na">Action</span><span class="pi">:</span>
          <span class="pi">-</span> <span class="s2">"</span><span class="s">secretsmanager:GetSecretValue"</span>
        <span class="c1"># This is the secret that was created by the newrelic-lambda cli tool. </span>
        <span class="c1"># To find it, open the AWS Console, and go to: Secrets Manager &gt; Secrets &gt; Find "NEW_RELIC_LICENSE_KEY", then copy the ARN</span>
        <span class="na">Resource</span><span class="pi">:</span> <span class="s2">"</span><span class="s">arn:aws:secretsmanager:us-east-1:1234567890:secret:NEW_RELIC_LICENSE_KEY-XXXXX"</span>
    <span class="na">events</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">httpApi</span><span class="pi">:</span>
          <span class="na">path</span><span class="pi">:</span> <span class="s">/health</span>
          <span class="na">method</span><span class="pi">:</span> <span class="s">get</span>

</code></pre></div></div>

<h2 id="5-application-code---metrics">5. Application Code - Metrics</h2>

<p>Finally, we need to modify our Serverless function code to use the <code class="language-plaintext highlighter-rouge">go-agent</code> sdk.</p>

<p>Notice how the <code class="language-plaintext highlighter-rouge">newrelic.NewApplication()</code> call has minimal configuration options specified (compared to the <a href="https://github.com/newrelic/go-agent/blob/master/v3/integrations/nrawssdk-v2/example/main.go">Raw AWS SDK Example</a>)</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>
<span class="k">import</span> <span class="p">(</span>
	<span class="s">"context"</span>
	<span class="s">"fmt"</span>

	<span class="s">"github.com/newrelic/go-agent/v3/integrations/nrlambda"</span>
	<span class="n">newrelic</span> <span class="s">"github.com/newrelic/go-agent/v3/newrelic"</span>
<span class="p">)</span>

<span class="k">func</span> <span class="n">handler</span><span class="p">(</span><span class="n">ctx</span> <span class="n">context</span><span class="o">.</span><span class="n">Context</span><span class="p">)</span> <span class="p">{</span>
	<span class="c">// The nrlambda handler instrumentation will add the transaction to the</span>
	<span class="c">// context.  Access it using newrelic.FromContext to add additional</span>
	<span class="c">// instrumentation.</span>
	<span class="n">txn</span> <span class="o">:=</span> <span class="n">newrelic</span><span class="o">.</span><span class="n">FromContext</span><span class="p">(</span><span class="n">ctx</span><span class="p">)</span>
	<span class="n">txn</span><span class="o">.</span><span class="n">AddAttribute</span><span class="p">(</span><span class="s">"userLevel"</span><span class="p">,</span> <span class="s">"gold"</span><span class="p">)</span>
	<span class="n">txn</span><span class="o">.</span><span class="n">Application</span><span class="p">()</span><span class="o">.</span><span class="n">RecordCustomEvent</span><span class="p">(</span><span class="s">"MyEvent"</span><span class="p">,</span> <span class="k">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="k">interface</span><span class="p">{}{</span>
		<span class="s">"zip"</span><span class="o">:</span> <span class="s">"zap"</span><span class="p">,</span>
	<span class="p">})</span>

	<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"hello world"</span><span class="p">)</span>
<span class="p">}</span>

<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="c">// Pass nrlambda.ConfigOption() into newrelic.NewApplication to set</span>
	<span class="c">// Lambda specific configuration settings including</span>
	<span class="c">// Config.ServerlessMode.Enabled.</span>
	<span class="n">app</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">newrelic</span><span class="o">.</span><span class="n">NewApplication</span><span class="p">(</span><span class="n">nrlambda</span><span class="o">.</span><span class="n">ConfigOption</span><span class="p">())</span>
	<span class="k">if</span> <span class="no">nil</span> <span class="o">!=</span> <span class="n">err</span> <span class="p">{</span>
		<span class="n">fmt</span><span class="o">.</span><span class="n">Println</span><span class="p">(</span><span class="s">"error creating app (invalid config):"</span><span class="p">,</span> <span class="n">err</span><span class="p">)</span>
	<span class="p">}</span>
	<span class="c">// nrlambda.Start should be used in place of lambda.Start.</span>
	<span class="c">// nrlambda.StartHandler should be used in place of lambda.StartHandler.</span>
	<span class="n">nrlambda</span><span class="o">.</span><span class="n">Start</span><span class="p">(</span><span class="n">handler</span><span class="p">,</span> <span class="n">app</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://blog.thesparktree.com/assets/images/newrelic/metrics.png" alt="metrics" /></p>

<h2 id="6-application-code---logs">6. Application Code - Logs</h2>

<p>If you had deployed the Serverless function defined in Step 5 as-is, you would see your metrics, however you would not see any logs in Newrelic.
This is because you’re missing the last bit of configuration to enable the Newrelic Lambda Extension to send logs to Newrelic.</p>

<div class="language-go highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="n">main</span>
<span class="k">import</span> <span class="p">(</span>
  <span class="s">"context"</span>
  <span class="s">"fmt"</span>

  <span class="s">"github.com/newrelic/go-agent/v3/integrations/nrlambda"</span>
  <span class="n">newrelic</span> <span class="s">"github.com/newrelic/go-agent/v3/newrelic"</span>
<span class="p">)</span>
<span class="k">func</span> <span class="n">main</span><span class="p">()</span> <span class="p">{</span>
	<span class="o">...</span>
	
	
	<span class="n">app</span><span class="p">,</span> <span class="n">err</span> <span class="o">:=</span> <span class="n">newrelic</span><span class="o">.</span><span class="n">NewApplication</span><span class="p">(</span>
        <span class="n">nrlambda</span><span class="o">.</span><span class="n">ConfigOption</span><span class="p">(),</span>
        
		<span class="c">// This is the configuration that enables the Newrelic Lambda Extension to send logs to Newrelic</span>
        <span class="n">newrelic</span><span class="o">.</span><span class="n">ConfigAppLogForwardingEnabled</span><span class="p">(</span><span class="no">true</span><span class="p">),</span>
		<span class="k">func</span><span class="p">(</span><span class="n">config</span> <span class="o">*</span><span class="n">newrelic</span><span class="o">.</span><span class="n">Config</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">logrus</span><span class="o">.</span><span class="n">SetLevel</span><span class="p">(</span><span class="n">logrus</span><span class="o">.</span><span class="n">DebugLevel</span><span class="p">)</span>
			<span class="n">config</span><span class="o">.</span><span class="n">Logger</span> <span class="o">=</span> <span class="n">nrlogrus</span><span class="o">.</span><span class="n">StandardLogger</span><span class="p">()</span>
		<span class="p">},</span>
	<span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p><img src="https://blog.thesparktree.com/assets/images/newrelic/logs.png" alt="metrics" /></p>

<h1 id="fin">Fin</h1>

<p>That’s it! Trigger a deployment, visit your Serverless function &amp; you should now be able to see your Serverless function metrics and logs in Newrelic.</p>

<p>If you encounter any issues, refer to my <a href="https://github.com/AnalogJ/newrelic-serverless-go-playground">GitHub repository</a> for a working example. Happy coding!</p>

<div class="github-widget" data-repo="AnalogJ/newrelic-serverless-go-playground"></div>

<h1 id="references">References</h1>
<ul>
  <li><a href="https://github.com/newrelic/newrelic-lambda-extension/blob/main/examples/sam/go/main.go">Newrelic Lambda Extension Example</a></li>
  <li><a href="https://github.com/newrelic/go-agent/blob/master/v3/integrations/nrlambda/example/main.go">Newrelic Go-Agent SDK Lamdba Example</a></li>
  <li><a href="https://github.com/newrelic/go-agent/blob/master/GUIDE.md#full-list-of-config-options-and-application-settings">Newrelic Go-Agent SDK Full Options</a></li>
  <li><a href="https://github.com/newrelic/docs-website/blob/develop/src/content/docs/serverless-function-monitoring/aws-lambda-monitoring/get-started/compatibility-requirements-aws-lambda-monitoring.mdx">Newrelic Lambda Layer Supported Runtimes</a></li>
  <li><a href="https://docs.newrelic.com/docs/serverless-function-monitoring/aws-lambda-monitoring/enable-lambda-monitoring/account-linking/#troubleshooting">Newrelic Troubleshooting Guide for Lambdas</a></li>
  <li><a href="https://forum.newrelic.com/s/hubtopic/aAX8W0000008eWv/lambda-troubleshooting-framework-troubleshooting-lambda-part-1">Newrelic Troubleshooting Guide for Lambdas - Forum Post - Part 1</a></li>
  <li><a href="https://docs.newrelic.com/docs/serverless-function-monitoring/aws-lambda-monitoring/enable-lambda-monitoring/enable-serverless-monitoring-aws-lambda-legacy/">Newrelic Legacy manual instrumentation for Lambda monitoring</a></li>
  <li><a href="https://github.com/newrelic/serverless-newrelic-lambda-layers">Newrelic Lambda Layer Plugin for Serverless Framework</a></li>
  <li><a href="https://github.com/mthenw/serverless-go-plugin">Serverless Framework Go Plugin</a></li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Custom Domains for AWS Lambda/API Gateway using Letsencrypt</title>
	  <link>/custom-domains-for-aws-lambdaapi-gateway-using</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2016-11-08T14:41:19-06:00</pubDate>
	  <guid>/custom-domains-for-aws-lambdaapi-gateway-using</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>AWS Lambda lets you run code without provisioning or managing servers. You pay only for the compute time you consume - there is no charge when your code is not running.</p>
</blockquote>

<p>In general Lambda is well designed and the platform is pretty developer friendly, especially if you use a framework like <a href="https://github.com/serverless/serverless">serverless</a> or <a href="https://github.com/apex/apex">apex</a>. However as someone who creates new services on Lambda all the time, there is one thing that consistently annoys me.</p>

<p><strong>Configuring a custom domain for use with Lambda is stupidly complex for such a common feature.</strong></p>

<p>Here’s the AWS documentation to <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/how-to-custom-domains.html">use a custom domain with API Gateway</a>. Take a look, I’ll wait.</p>

<p>At first glance the instructions seem somewhat reasonable. For security reasons API Gateway requires SSL for all requests, which means that to use a custom domain, you first need an SSL certificate.</p>

<p>Unfortunately this becomes a problem when you realize that
Letsencrypt HTTP-01 doesn’t work because of the catch-22 requiring you to prove that you own the custom domain before generating certificates. Even worse, AWS’s built-in free certificate service (Certificate Manger) <a href="https://stackoverflow.com/questions/36497896/can-i-use-aws-certificate-manager-certificates-for-api-gateway-with-custom-domai">doesn’t yet support API Gateway</a>.</p>

<p>So what’s the solution?</p>

<hr />

<p>I was able to create a nice little script using python which invokes the <a href="https://aws.amazon.com/cli/">aws-cli</a>, <a href="https://github.com/lukas2511/dehydrated">dehydrated</a> letsencrypt client &amp; <a href="https://github.com/AnalogJ/lexicon">lexicon</a> and does all the steps necessary to add a custom domain to an API Gateway, automatically.</p>

<p>Here’s what it does:</p>

<ul>
  <li>validates that all the correct credentials &amp; environmental variables are set</li>
  <li>validates that the specified AWS API Gateway exists</li>
  <li>generate a new set of letsencrypt certificates for the specified custom domain using the DNS-01 challenge &amp; lexicon</li>
  <li>register custom domain name with AWS (which creates a distribution domain name on cloudfront)</li>
  <li>adds a CNAME dns record mapping your custom domain to the AWS distribution domain</li>
  <li>maps the custom domain to your selected API Gateway</li>
</ul>

<p>The code is all open source and lives here: <a href="https://github.com/AnalogJ/aws-api-gateway-letsencrypt/blob/master/api-gateway-custom-domain.py">Analogj/aws-api-gateway-letsencrypt</a></p>

<div class="github-widget" data-repo="AnalogJ/aws-api-gateway-letsencrypt"></div>

<p>I’ve also created a simple <a href="https://github.com/AnalogJ/aws-api-gateway-letsencrypt/blob/master/Dockerfile">Docker image</a> which you can use if you don’t want to install anything:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="se">\</span>
<span class="nt">-e</span> <span class="nv">LEXICON_CLOUDFLARE_USERNAME</span><span class="o">=</span><span class="k">***</span> <span class="se">\</span>
<span class="nt">-e</span> <span class="nv">LEXICON_CLOUDFLARE_TOKEN</span><span class="o">=</span><span class="k">***</span> <span class="se">\</span>
<span class="nt">-e</span> <span class="nv">AWS_ACCESS_KEY_ID</span><span class="o">=</span><span class="k">***</span> <span class="se">\</span>
<span class="nt">-e</span> <span class="nv">AWS_SECRET_ACCESS_KEY</span><span class="o">=</span><span class="k">***</span> <span class="se">\</span>
<span class="nt">-e</span> <span class="nv">DOMAIN</span><span class="o">=</span>api.quietthyme.com <span class="se">\</span>
<span class="nt">-e</span> <span class="nv">API_GATEWAY_NAME</span><span class="o">=</span>dev-quietthyme-api <span class="se">\</span>
<span class="nt">-v</span> <span class="sb">`</span><span class="nb">pwd</span><span class="sb">`</span>/certs:/srv/certs <span class="se">\</span>
analogj/aws-api-gateway-letsencrypt
</code></pre></div></div>

	  ]]></description>
	</item>


</channel>
</rss>
