<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>blog.thesparktree.com</title>
   
   <link>https://blog.thesparktree.com</link>
   <description>Devops posts & guides about interesting tech like Docker, Letsencrypt, Chef, Angular, Automation, API's or other topics that you should know about. </description>
   <language>en-uk</language>
   <managingEditor> Jason Kulatunga</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Ultimate Media Server Build - Part 3 - MediaDepot/CoreOS Configuration</title>
	  <link>/ultimate-media-server-build-mediadepot</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2019-01-25T03:19:33-06:00</pubDate>
	  <guid>/ultimate-media-server-build-mediadepot</guid>
	  <description><![CDATA[
	     <p>I’ve referenced my home server many times, but I never had the time to go into the details of how it was built or how it works.
Recently I decided to completely rebuild it, replacing the hardware and basing it on-top of a completely new operating system.
I thought it would be a good idea to keep a build log, tracking what I did, my design decisions, and constraints you should consider
if you want to follow in my footsteps.</p>

<p>This series will be broken up into multiple parts</p>

<ul>
  <li><a href="/ultimate-media-server-build-hardware">Part 1 - Hardware</a></li>
  <li><a href="/ultimate-media-server-build-log">Part 2 - Build Log</a></li>
  <li><strong><a href="/ultimate-media-server-build-mediadepot">Part 3 - MediaDepot/CoreOS Configuration</a></strong></li>
  <li>Part 4 - Application Docker Containers</li>
</ul>

<p>This is <strong>Part 3</strong>, where I’ll be discussing the software I use to run my ultimate media server, specifically focusing on installing and
configuring CoreOS for MediaDepot.</p>

<hr />

<p>The hardware and build process for <strong>“The Ultimate Media Server”</strong> was outlined in previous posts, but hardware is only
one part of the solution. Software (OS &amp; Applications) determine the functionality and ultimately the value of our home server.</p>

<p>Before we dive into the details, let’s start with a bit of a teaser showing off some of the applications and services that I run on my server.</p>

<div class="img-gallery">
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/1_heimdall.png">
      <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/1_heimdall_thumb.png" alt="heimdall screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/2_portainer.png">
      <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/2_portainer_thumb.png" alt="portainer screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/3_filerun.png">
      <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/3_filerun_thumb.png" alt="filerun screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/4_duplicati.png">
    <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/4_duplicati_thumb.png" alt="duplicata screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/5_tautulli.png">
      <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/5_tautulli_thumb.png" alt="tautulli screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/6_sickchill.png">
    <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/6_sickchill_thumb.png" alt="sickchill screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/7_couchpotato.png">
    <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/7_couchpotato_thumb.png" alt="couchpotato screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/8_jackett.png">
    <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/8_jackett_thumb.png" alt="jackett screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/9_plexrequests.png">
    <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/9_plexrequests_thumb.png" alt="plex requests screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/10_plex.png">
    <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/10_plex_thumb.png" alt="plex screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/11_netdata.png">
    <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/11_netdata_thumb.png" alt="netdata screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/12_rutorrent.png">
    <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/12_rutorrent_thumb.png" alt="rutorrent screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/13_ipmi.png">
    <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/13_ipmi_thumb.png" alt="ipmi screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/14_sismicsdocs.png">
    <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/14_sismicsdocs_thumb.png" alt="sismics screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/15_folder_structure.png">
    <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/15_folder_structure_thumb.png" alt="folder screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/16_app_data.png">
    <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/16_app_data_thumb.png" alt="app data screenshot" />
  </a>
  <a href="https://blog.thesparktree.com/assets/images/mediadepot_software/17_samba_shares.png">
    <img src="https://blog.thesparktree.com/assets/images/mediadepot_software/17_samba_shares_thumb.png" alt="samba screenshot" />
  </a>
</div>

<p>Still interested? Good. Now that we have an idea what the finished product will look like, lets discuss the actual software stack and my requirements.</p>

<div class="github-widget" data-repo="mediadepot/docs"></div>

<p>While this blog post will describe the step by step instructions for setting up CoreOS &amp; Mediadepot, then <a href="https://www.github.com/mediadepot/docs">mediadepot/docs</a>
repo contains additional documentation that you might find interesting.</p>

<p>Given that our goal of building the <strong>“The Ultimate Media Server”</strong> is pretty hard to quantify, lets give ourselves some constraints and requirements that we can actually track.</p>

<ol>
  <li>The server will be self hosted, with only <strong>one physical node</strong> (if you need a multi-node media server, this wont work for you)</li>
  <li>The server will be running <strong>headless (no monitor is required)</strong></li>
  <li>The server will be running a <strong>minimal OS/hypervisor</strong>. This is to limit the amount of OS maintenance required, and ensure that all software is run in a maintainable &amp; isolated way.</li>
  <li>The server will be using <strong>JBOD disk storage</strong> (allowing you to aggregate and transparently interact with multiple physical disks as a single volume)
    <ul>
      <li><strong>Redundancy is should be supported but is not a requirement.</strong></li>
    </ul>
  </li>
  <li>The server will provide a <strong>automation friendly folder structure</strong> for use by media managers (sickrage, couchpotato, sonar, plex, etc)</li>
  <li>The server will provide a <strong>monitoring</strong> solution with a web GUI.</li>
  <li>The server will provide a routing method to running web applications via a custom domain <strong>*.depot.lan</strong></li>
  <li>The server will provide a method that user <strong>applications can use to notify the user</strong> when events have occurred (download started, completed, media added)</li>
  <li>The server will provide a way to <strong>backup application configuration</strong> to a secondary location.</li>
</ol>

<p>The first two items on the list are already done. The hardware chosen in <a href="https://blog.thesparktree.com/ultimate-media-server-build-hardware">Part 1</a> was only for a single server.
The headless requirement (<strong>#2</strong>) is solved by the IPMI functionality built into our SuperMicro X11SSL-CF motherboard.</p>

<p><img src="https://blog.thesparktree.com/assets/images/mediadepot_software/13_ipmi_kvm.png" alt="IPMI" style="max-height: 500px;" /></p>

<p>IPMI provides us with the ability to remotely manage the server, including the ability to see what’s “running” on the server using a virtual display + KVM.</p>

<h4 id="coreos">CoreOS</h4>

<p>Requirement <strong>#3</strong> is where this blog post really starts.
Rather than going with a traditional virtualization/hypervisor solution like VMWare ESXI or Proxmox, I’m going to evangelize
the use of CoreOS Container Linux as the base Operating System for your Home Server</p>

<p>So what is CoreOS?</p>

<blockquote>
  <p>As an operating system, Container Linux provides only the minimal functionality required for deploying applications inside software containers,
together with built-in mechanisms for service discovery and configuration sharing.
Container Linux provides no package manager as a way for distributing payload applications, requiring instead all applications to run inside their containers.</p>

  <p>https://en.wikipedia.org/wiki/Container_Linux</p>
</blockquote>

<p>Basically CoreOS is an incredibly slim Linux OS that is designed to do one thing, and one thing only: run Docker containers.
As mentioned in the wikipedia article, CoreOS does not have a package manager and requires that all user applications run in docker containers,
drastically reducing the amount of OS maintenance required (<strong>#3</strong>)</p>

<h4 id="jbod-storage">JBOD Storage</h4>

<p>This latest iteration of my Home Server follows atleast a half dozen other Home Server’s I’ve built over the years. While I’ve used various
software and hardware RAID solutions in the past, it’s been my experience that JBOD (Just-A-Bunch-Of-Drives) solutions work best for
home servers.</p>

<ul>
  <li>JBOD allows you to easily mix-and-match drives, letting your server grow with you.</li>
  <li>Performance &amp; Redundancy may not be as important as Raw Storage &amp; Simplicity for home servers</li>
  <li>While disk failures can result in data loss, you only lose the content of that drive, rather the whole drive array (depending on RAID mode)</li>
</ul>

<p>While I have played with various JBOD file systems (mhddfs, greyhole, zfs), I’ve found that <a href="https://github.com/trapexit/mergerfs">MergerFS</a>
is simple and bulletproof, without any weird file system hacks to get JBOD working.</p>

<h4 id="folder-structure">Folder Structure</h4>

<p>Next up is finding a folder structure that works for all the data we need to store on our server. While this seems like a fairly
trivial problem, once we start using automatic media downloaders like SickChill, CouchPotato, Sonarr &amp; Radarr, things become much more complicated.</p>

<p>Here’s the structure that I’ve been using for years:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">/media/temp/blackhole/*</code> - temporarily contains <code class="language-plaintext highlighter-rouge">.torrent</code> files. These files can be added manually via SMB, or automatically by apps like sickrage, couchpotato, sonarr, etc.</li>
  <li><code class="language-plaintext highlighter-rouge">/media/temp/processing</code> - a cache directory used by your torent client. Temporarily holds current download files. Once complete they are moved into the correct subfolder of <code class="language-plaintext highlighter-rouge">/media/storage/downloads</code></li>
  <li><code class="language-plaintext highlighter-rouge">/media/storage/downloads/*</code> - contains completed torrent downloads. Files added here are automatically detected by media managers (sickrage, couchpotato, etc) then renamed/reorganized and moved to their
final storage directory <code class="language-plaintext highlighter-rouge">/media/storage/*</code></li>
  <li><code class="language-plaintext highlighter-rouge">/media/storage/*</code> - contains the final renamed/organized media, to be used by your media streamer of choice (Plex/Emby/etc).
All subfolders are automatically created as SMB shares</li>
</ul>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>/media
├── storage/
│   ├── downloads/
│   │   ├── movies/
│   │   ├── music/
│   │   ├── tvshows/
│   ├── movies/
│   ├── music/
│   ├── tvshows/
├── temp/
│   ├── blackhole/
│   │   ├── movies/
│   │   ├── music/
│   │   ├── tvshows/
│   └── processing/

</code></pre></div></div>

<p>This structure is automation friendly, easy to manage via the commandline, and customizable.</p>

<h4 id="monitoring">Monitoring</h4>

<p>While Corporate and Enterprise monitoring solutions have a lot of features, for a home server I’ve found that theres
really only 3 things that I need:</p>
<ul>
  <li>a nice light-weight dashboard that tracks CPU, Disk &amp; Memory usage</li>
  <li>a way to track the S.M.A.R.T health status of my storage disks (and get notified if something has changed)</li>
  <li>a way to manage the Dockerized applications running on my server, and restart/update them if necessary</li>
</ul>

<p>While <a href="https://prometheus.io/docs/visualization/grafana/">Graphana + Prometheus</a> solutions are common for generating nice server dashboards, it’s not quite as light-weight as
I like. Netdata is extremely light-weight, extensible, gorgeous, and works out of the box.</p>

<p><img src="https://blog.thesparktree.com/assets/images/mediadepot_software/11_netdata.png" alt="netdata" style="max-height: 500px;" /></p>

<p>On Linux, the defacto standard for S.M.A.R.T disk monitoring is <a href="https://www.smartmontools.org/">smartmontools</a>, so that’s an easy choice.
With a bit of customization, we can also get notifications via PushBullet or PushOver.</p>

<p>Finally, we’ll need a Docker manager with a web interface that we can use to remotely manage our Dockerized applications.
Once again, there’s alot of alternatives, but there’s only one that has the functionality that want with the lightweight footprint that
I desire: <a href="https://www.portainer.io/">Portainer</a></p>

<p><img src="https://blog.thesparktree.com/assets/images/mediadepot_software/2_portainer.png" alt="portainer" style="max-height: 500px;" /></p>

<h4 id="routing--subdomains">Routing &amp; Subdomains</h4>

<p>Subdomains is a quality of life improvement that becomes almost a necessity when you’re running more than 3 or 4 services on your server.
Remembering <code class="language-plaintext highlighter-rouge">sickrage.depot.lan</code> and <code class="language-plaintext highlighter-rouge">couchpotato.depot.lan</code> is much more reasonable than <code class="language-plaintext highlighter-rouge">10.0.1.100:54338</code> and <code class="language-plaintext highlighter-rouge">10.0.1.100:54221</code>.
Having those subdomains map automatically to the relevant Docker container is the responsibility of a reverse proxy called <a href="https://traefik.io/">Traefik</a>
Once configured it’ll automatically watch for new (or updated) Docker containers and automatically assign them a subdomain.
No more ports.</p>

<p>Routing is a bit more complicated. Now that you have these nice subdomains for applications on your server, how do you tell all your
devices (including phones, laptops, tablets, etc) that these new websites exist on your home network rather than the internet?</p>

<p>Traditionally you’d need to update your OS host file (located at <code class="language-plaintext highlighter-rouge">/etc/hosts</code> or <code class="language-plaintext highlighter-rouge">c:\Windows\System32\Drivers\etc\hosts</code>) with
a new entry per domain, but that gets old fast, and doesn’t really work for locked down mobile devices like Tablets &amp; Phones.</p>

<p>The solution here is to run a tiny (notice a pattern here?) DNS service on the server. This DNS service is configured to
capture all requests for <code class="language-plaintext highlighter-rouge">*.depot.lan</code> and respond with the server’s IP address, while redirecting all other DNS requests to
the public internet.</p>

<p>Unlike the hosts file, DNS configuration is user customizable even on mobile &amp; tablet devices. Now all we need to do is
update our devices to use this new DNS service. It introduces a bit of latency, but thankfully most mobile devices (laptops/tables/phones)
configure DNS on a network by network basis, meaning your custom DNS service will only be activated when your on your home network.</p>

<h2 id="installation">Installation</h2>

<p>If you’ve been following along so far (or skipped ahead), you may have noticed a significant lack of code snippets or
instructions for how to get this all setup.</p>

<p>You’re in luck. All the steps required to customize a CoreOS based Home Media Server as I’ve described are codified in an Ignition project.</p>

<div class="github-widget" data-repo="mediadepot/ignition"></div>

<p>It’s all open source, and MIT licensed. Feel free to fork it, or add any features you think might be relevant, I’m open to PR’s.</p>

<p>If you’re not familiar with Ignition, its the official configuration management solution for CoreOS.
You can take the <a href="https://github.com/mediadepot/ignition/blob/master/ignition.yaml">configuration I wrote</a> and customize it for your needs. In addition the Ignition configuration references each feature
separately, so you can disable any features that are irrelevant to your installation.</p>

<p>Once you’ve modified the ignition.yaml file, you’ll need to “transpile” it to a JSON format that ignition actually understands.
To do that, you’ll need to install the <a href="https://github.com/coreos/container-linux-config-transpiler/">Container Linux Config Transpiler</a>,
but we’ll just use a simple Docker image with the Config Transpiler pre-installed.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run --rm -v $(pwd):/data keinos/coreos-transpiler ct -strict -pretty -in-file /data/ignition.yaml -out-file /data/ignition.json -files-dir=/data/files/  -platform=custom
</code></pre></div></div>

<p>With that all out of the way, lets get into the installation steps.</p>

<ol>
  <li>Download bootable CoreOS image from https://coreos.com/os/docs/latest/booting-with-iso.html</li>
  <li>Create bootable USB/CD with contents of CoreOS image</li>
  <li>Start server and boot from CoreOS USB/CD.</li>
  <li>Determine the OS installation disk
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>fdisk <span class="nt">-l</span>

 <span class="c"># note, the boot disk will probably be /dev/loop0</span>
</code></pre></div>    </div>
  </li>
  <li>Copy the ignition.json config bootstrap file that you created earlier to the file system (using CURL, or another USB)</li>
  <li>Begin CoreOS installation on specified disk, <strong>NOTE: specified disk will be reformatted</strong>
    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>coreos-install <span class="nt">-d</span> /dev/sda <span class="nt">-C</span> stable <span class="nt">-i</span> ignition.json
</code></pre></div>    </div>
  </li>
  <li>On installation completion, remove bootable USB/CD</li>
  <li>Restart server</li>
  <li>Wait for CoreOS to start and <code class="language-plaintext highlighter-rouge">cloud-init</code> process to complete.</li>
  <li>Go to <code class="language-plaintext highlighter-rouge">http://admin.depot.lan</code> to see Portainer dashboard and begin setup.</li>
</ol>

<p>I’ve been drinking the Docker kool-aid for years, and as a configuration management &amp; deployment tool it’s only gotten better and more popular.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Customize the CoreOS Kernel - Part 2 - Kernel SDK</title>
	  <link>/customize-coreos-kernel-part-2</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2019-01-02T03:19:33-06:00</pubDate>
	  <guid>/customize-coreos-kernel-part-2</guid>
	  <description><![CDATA[
	     <p>After running into a roadblock while attempting to <a href="./customize-coreos-kernel-part-1">build the Intel I915 driver as a kernel module</a> for CoreOS,
it became clear that we would need to build a completely custom CoreOS kernel with the drivers and features we need enabled.</p>

<p>Thankfully the CoreOS developers have provided us with a set of tools and documentation to help make this process a bit easier:</p>

<p><a href="https://coreos.com/os/docs/latest/sdk-modifying-coreos.html">CoreOS Container Linux developer SDK</a></p>

<p>CoreOS is all open source and made up of a couple dozen git repositories, which are then glued together and compiled by the tools included in the
SDK.</p>

<p>The SDK tools are meant to be installed on a computer running Linux, however to make things easier for myself I created a CentOS VM using a
simple Vagrantfile:</p>

<pre><code class="language-vagrantfile">
Vagrant.configure("2") do |config|
    config.vm.box = "centos/7"

    config.vm.provider "virtualbox" do |v|
        v.name = "coreos_builder"
        v.memory = 11264
        v.cpus = 4
    end

    config.vm.provision "shell", path: "provisioner.sh"
end

</code></pre>

<p>You’ll want to give as much CPU and RAM as you can, as the build and compilation steps are time consuming (I’m talking multiple hours here).</p>

<h1 id="building-vanilla-coreos">Building Vanilla CoreOS</h1>

<p>The first thing I want to do is build a vanilla version of CoreOS without any changes. To do this we’ll create a <code class="language-plaintext highlighter-rouge">provisioner.sh</code> script
and populate it as follows:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/usr/bin/env bash</span>

<span class="c">## Prerequisites</span>

yum <span class="nb">install</span> <span class="nt">-y</span> <span class="se">\</span>
    ca-certificates <span class="se">\</span>
    curl <span class="se">\</span>
    git <span class="se">\</span>
    bzip2

<span class="nb">cd</span> /usr/bin <span class="o">&amp;&amp;</span> <span class="se">\</span>
    curl <span class="nt">-L</span> <span class="nt">-o</span> cork https://github.com/coreos/mantle/releases/download/v0.11.1/cork-0.11.1-amd64 <span class="o">&amp;&amp;</span> <span class="se">\</span>
    <span class="nb">chmod</span> +x cork <span class="o">&amp;&amp;</span> <span class="se">\</span>
    which cork

<span class="c">## Using Cork</span>
<span class="c"># https://coreos.com/os/docs/latest/sdk-modifying-coreos.html</span>

<span class="nb">exec sudo</span> <span class="nt">-u</span> vagrant /bin/sh - <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
whoami
git config --global user.email "jason@thesparktree.com" &amp;&amp; </span><span class="se">\</span><span class="sh">
git config --global user.name "Jason Kulatunga"

mkdir -p ~/coreos-sdk
cd ~/coreos-sdk
cork create

cork enter
grep NAME /etc/os-release

./set_shared_user_password.sh mediadepot
./setup_board
./build_packages
./build_image
</span><span class="no">
EOF

</span></code></pre></div></div>

<p>As you can see the <code class="language-plaintext highlighter-rouge">Prerequsites</code> section is pretty straight forward, we download &amp; install the SDK dependencies as listed
in their documentation and download the <code class="language-plaintext highlighter-rouge">cork</code> tool.</p>

<p>Then the script gets a bit interesting. We tell Vagrant to execute the following commands as the <code class="language-plaintext highlighter-rouge">vagrant</code> user, rather than
the default <code class="language-plaintext highlighter-rouge">root</code> user used during provisioning. This is due to the fact that the <code class="language-plaintext highlighter-rouge">cork</code> tool <a href="https://github.com/coreos/mantle/issues/958">expects to be run as a regular user
not root</a>.</p>

<p>So we’ll verify that we’re running as <code class="language-plaintext highlighter-rouge">vagrant</code> using <code class="language-plaintext highlighter-rouge">whoami</code>, then configure the <code class="language-plaintext highlighter-rouge">git</code> tool</p>

<p>Then we’ll go back to the steps mentioned in the SDK guide, creating a folder for the SDK to manage, and finally running the <code class="language-plaintext highlighter-rouge">cork</code>
commands.</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">cork create</code> will download and unpack the SDK into the current directory</li>
  <li><code class="language-plaintext highlighter-rouge">cork enter</code> will enter a <a href="https://wiki.archlinux.org/index.php/chroot"><code class="language-plaintext highlighter-rouge">chroot</code></a> with additional SDK tools that we can then use to
download &amp; compile our coreos image</li>
</ul>

<p>Now that we have a <code class="language-plaintext highlighter-rouge">Vagrantfile</code> and <code class="language-plaintext highlighter-rouge">provisioner.sh</code> script, we can verify our VM configuration and run <code class="language-plaintext highlighter-rouge">vagrant up</code> to build and provision
our VM.</p>

<p><code class="language-plaintext highlighter-rouge">vagrant up</code> took more than 4 hours to complete on my machine (how long did it take you?). Once complete, you should be greeted with a success
message that looks like the following:</p>

<p><img src="https://blog.thesparktree.com/assets/images/coreos/sdk_complete.png" alt="sdk complete" /></p>

<p>At this point we’ve verified that our base tooling is installed correctly, and that we can build CoreOS images. Now we need to start
our kernel customizations.</p>

<h1 id="forking-coreos-source-repos">Forking CoreOS Source Repos</h1>

<p>As I mentioned earlier, CoreOS is broken up into a couple dozen git repos, but the primary repo is called <a href="https://github.com/coreos/manifest"><code class="language-plaintext highlighter-rouge">coreos/manifest</code></a>.</p>

<p>Looking at the <a href="https://github.com/coreos/manifest/blob/master/master.xml">master.xml</a> makes it clear why <code class="language-plaintext highlighter-rouge">manifest</code> is so
important: <strong>It references all the other git repos that are used when building CoreOS</strong></p>

<p>The first thing we’re going to do is fork and clone repo so that we can customize the repos used to ones that contain our changes.</p>

<p>I forked <code class="language-plaintext highlighter-rouge">coreos/manifest</code> to <a href="https://github.com/mediadepot/coreos-manifest">mediadepot/coreos-manifest</a> and then ran
<code class="language-plaintext highlighter-rouge">git clone git@github.com:mediadepot/coreos-manifest.git</code></p>

<div class="github-widget" data-repo="mediadepot/coreos-manifest"></div>

<p>You may have noticed that there’s a ton of branches in this repo. These branches are all prefixed with <code class="language-plaintext highlighter-rouge">build-</code>. These <code class="language-plaintext highlighter-rouge">build-</code> branches
are how CoreOS manages versioning and directly matches the major version specified in <a href="https://coreos.com/releases/">https://coreos.com/releases/</a></p>

<p><img src="https://blog.thesparktree.com/assets/images/coreos/build_branches.png" alt="build branches" /></p>

<p>In my case I want to build my custom image off of the current CoreOS Stable version which is <code class="language-plaintext highlighter-rouge">1911.4.0</code>.</p>

<p>To do this, I’ll checkout the <code class="language-plaintext highlighter-rouge">build-1911</code> branch, and then create a new branch ontop of that:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout build-1911
git checkout -b mediadepot
git commit --allow-empty -m "Mediadepot branch created from build-1911"
git push
</code></pre></div></div>

<p>Now you’ll have a branch built off the latest stable release that’s ready to work with.</p>

<p>Now we’ll want to look at the master.xml file and determine the referenced repos that we need to fork.
Since we only to customize the CoreOS kernel, there’s only a couple of repos that are relevant, we can leave the rest unchanged.</p>

<ul>
  <li><a href="https://github.com/coreos/coreos-overlay">coreos/coreos-overlay</a> - contains Container Linux specific packages and Gentoo packages that differ from their upstream Gentoo versions.
This is also where the CoreOS kernel customizations are contained.</li>
  <li><a href="https://github.com/coreos/init">coreos/init</a> - contains <code class="language-plaintext highlighter-rouge">coreos_installer</code> script which is executed from bootable ISO. Needs to be modified to point to our custom image webhost.</li>
  <li><strong>(OPTIONAL)</strong> <a href="https://github.com/coreos/scripts">coreos/scripts</a> - contains various scripts used for packaging/maintaining CoreOS. We only care about this repo because we can use
it to change the release version file that gets written to the server after installation, which is great for validation</li>
</ul>

<p>As with coreos/manifest, we’ll fork these repos, and create a new branch that is based on the build-1911 branch.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:mediadepot/coreos-overlay.git
cd coreos-overlay
git checkout build-1911
git checkout -b mediadepot
git commit --allow-empty -m "Mediadepot branch created from build-1911"
git push

cd ..
git clone git@github.com:mediadepot/coreos-init.git
cd coreos-init
git checkout master
git checkout -b mediadepot
git commit --allow-empty -m "Mediadepot branch created from master"
git push

cd ..
git clone git@github.com:mediadepot/coreos-scripts.git
cd coreos-scripts
git checkout build-1911
git checkout -b mediadepot
git commit --allow-empty -m "Mediadepot branch created from build-1911"
git push

</code></pre></div></div>

<h1 id="modify-the-manifest">Modify the Manifest</h1>

<p>At this point we’ve forked our target repos, but the manifest doesn’t know about them. It’s time to remedy that.</p>

<p>We’re going to modify <code class="language-plaintext highlighter-rouge">master.xml</code> so that references to <code class="language-plaintext highlighter-rouge">coreos/scripts</code> and <code class="language-plaintext highlighter-rouge">coreos/coreos-overlay</code> point to our new
repos and branches</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## HOST ##
cat coreos-manifest/master.xml

&lt;project path="src/scripts"
    name="mediadepot/coreos-scripts"
    revision="mediadepot"
    groups="minilayout" /&gt;

...
  &lt;project path="src/third_party/init"
    name="mediadepot/coreos-init"
    revision="mediadepot"
    groups="minilayout" /&gt;
...
&lt;project path="src/third_party/coreos-overlay"
    name="mediadepot/coreos-overlay"
    revision="mediadepot"
    groups="minilayout" /&gt;
</code></pre></div></div>

<p>Note the changes to the <code class="language-plaintext highlighter-rouge">name</code> attribute and the addition of the <code class="language-plaintext highlighter-rouge">revision="mediadepot"</code> attribute.</p>

<h1 id="making-changes">Making Changes</h1>
<p>Before we go further, lets list all the changes we need to make to the CoreOS source.</p>

<ol>
  <li>Customize the linux kernel options to enable the <code class="language-plaintext highlighter-rouge">i915</code> driver</li>
  <li>Customization of <code class="language-plaintext highlighter-rouge">coreos_install</code> script to point to our custom image storage</li>
  <li>Customize the OS_NAME in <code class="language-plaintext highlighter-rouge">/etc/lsb_release</code>, for easy verification</li>
  <li><strong>(OPTIONAL)</strong> Sign up for Google Cloud Platform, create a storage bucket and service account</li>
</ol>

<h2 id="custom-kernel">Custom Kernel</h2>
<p>Let’s start by making changes to the <code class="language-plaintext highlighter-rouge">coreos-overlay</code> since that’s where the linux kernel customization code for CoreOS exists.</p>

<div class="github-widget" data-repo="mediadepot/coreos-overlay"></div>

<p>The file containing the kernel config options for our CoreOS build can be found in
<a href="https://github.com/mediadepot/coreos-overlay/blob/mediadepot/sys-kernel/coreos-modules/files/amd64_defconfig-4.14">sys-kernel/coreos-modules/files/amd64_defconfig-4.14</a></p>

<p>However we still need to determine the kernel options that we need to enable.</p>

<p>Once again we go back to the <code class="language-plaintext highlighter-rouge">coreos_developer_container</code> that we used in <a href="https://blog.thesparktree.com/customize-coreos-kernel-part-1#configure-kernel-options">Customize CoreOS Kernel - Part 1</a></p>

<p>We’ll run <code class="language-plaintext highlighter-rouge">make menuconfig</code> in the <code class="language-plaintext highlighter-rouge">usr/src/linux</code> directory to select all our kernel options, follow the remaining steps in the previous post,
 and then we’ll run a new command: <code class="language-plaintext highlighter-rouge">scripts/diffconfig .config.old .config</code></p>

<p>The output from this command is basically a diff listing all the changes necessary to enable your selected kernel customizations from the base CoreOS kernel.</p>

<p>We’ll need to massage the output a bit by removing <code class="language-plaintext highlighter-rouge">+</code> characters, transitions and prefixing each line with <code class="language-plaintext highlighter-rouge">CONFIG_</code>. We’ll end up with something like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CONFIG_AGP=y
CONFIG_BACKLIGHT_CLASS_DEVICE=m
CONFIG_DMA_SHARED_BUFFER=y
CONFIG_DRM=m
CONFIG_FB_SYS_COPYAREA=y
CONFIG_FB_SYS_FILLRECT=y
CONFIG_FB_SYS_FOPS=y
CONFIG_FB_SYS_IMAGEBLIT=y
CONFIG_I2C=y
CONFIG_I2C_ALGOBIT=y
CONFIG_LOGO=y
CONFIG_REGMAP_I2C=y
CONFIG_RTC_I2C_AND_SPI=y
CONFIG_SYNC_FILE=y
CONFIG_ACPI_I2C_OPREGION=y
CONFIG_ACPI_VIDEO=m
CONFIG_BACKLIGHT_GENERIC=m
CONFIG_DRM_BRIDGE=y
CONFIG_DRM_FBDEV_EMULATION=y
CONFIG_DRM_FBDEV_OVERALLOC=100
CONFIG_DRM_I915=m
CONFIG_DRM_I915_CAPTURE_ERROR=y
CONFIG_DRM_I915_COMPRESS_ERROR=y
CONFIG_DRM_I915_USERPTR=y
CONFIG_DRM_KMS_FB_HELPER=y
CONFIG_DRM_KMS_HELPER=y
CONFIG_DRM_MIPI_DSI=y
CONFIG_DRM_PANEL=y
CONFIG_DRM_PANEL_BRIDGE=y
CONFIG_HDMI=y
CONFIG_INTEL_GTT=m
CONFIG_INTERVAL_TREE=y
CONFIG_LOGO_LINUX_CLUT224=y
CONFIG_LOGO_LINUX_MONO=y
CONFIG_LOGO_LINUX_VGA16=y
</code></pre></div></div>

<p>We can now paste this content at the bottom of our <code class="language-plaintext highlighter-rouge">sys-kernel/coreos-modules/files/amd64_defconfig-4.14</code> file and commit
the change to our branch.</p>

<p>We’ll also want to customize the <code class="language-plaintext highlighter-rouge">coreos-base/coreos-init/coreos-init-9999.ebuild</code> file, pointing this package to our forked repo:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>CROS_WORKON_PROJECT="mediadepot/coreos-init"
CROS_WORKON_LOCALNAME="init"
CROS_WORKON_REPO="git://github.com"

if [[ "${PV}" == 9999 ]]; then
	KEYWORDS="~amd64 ~arm ~arm64 ~x86"
else
	CROS_WORKON_COMMIT="mediadepot"
	KEYWORDS="amd64 arm arm64 x86"
fi
</code></pre></div></div>

<p>Here’s a <a href="https://github.com/mediadepot/coreos-overlay/compare/build-1911...mediadepot:mediadepot">diff showing my changes to the <code class="language-plaintext highlighter-rouge">mediadepot/coreos-overlay</code> repo</a></p>

<h2 id="iso-installer-custom-hosting">ISO Installer Custom Hosting</h2>
<p>If you’ve been following along so far, you may think that creating a custom <code class="language-plaintext highlighter-rouge">.bin</code> file is enough, but I learned the hard way that’s incorrect.</p>

<p>The <code class="language-plaintext highlighter-rouge">build_image</code> command in the <code class="language-plaintext highlighter-rouge">provisioner.sh</code> script will build a <code class="language-plaintext highlighter-rouge">.bin</code> file for us, but we need a bootable <code class="language-plaintext highlighter-rouge">.iso</code>.
Thankfully the CoreOS devs created a tool called <code class="language-plaintext highlighter-rouge">image_to_vm.sh</code> which (confusingly) can be used to create bootable <code class="language-plaintext highlighter-rouge">.iso</code> images.</p>

<p>Not so fast.</p>

<p><strong>While we now have a bootable <code class="language-plaintext highlighter-rouge">.iso</code> that uses our custom kernel, the <code class="language-plaintext highlighter-rouge">coreos-install</code> script in the <code class="language-plaintext highlighter-rouge">.iso</code> actually
downloads a vanilla <code class="language-plaintext highlighter-rouge">.bin</code> file from the public CoreOS mirror and installs that <code class="language-plaintext highlighter-rouge">.bin</code> to the host machine.</strong></p>

<div class="github-widget" data-repo="mediadepot/coreos-init"></div>

<p>We’ll need open our fork of <code class="language-plaintext highlighter-rouge">coreos/init</code>: <a href="https://github.com/mediadepot/coreos-init"><code class="language-plaintext highlighter-rouge">mediadepot/coreos-init</code></a> and update the <a href="https://github.com/mediadepot/coreos-init/blob/mediadepot/bin/coreos-install"><code class="language-plaintext highlighter-rouge">coreos-install</code></a> script:</p>

<ul>
  <li>to point to our custom BASE_URL (where we’ll be hosting our images)</li>
  <li>remove some GPG signing requirements (I know, I know, we’ll add them back later)</li>
</ul>

<p>Here’s a <a href="https://github.com/mediadepot/coreos-init/compare/master...mediadepot:mediadepot">diff showing my changes to the <code class="language-plaintext highlighter-rouge">mediadepot/coreos-init</code> repo</a></p>

<h2 id="customize-coreos-release">Customize CoreOS Release</h2>
<p>This next change is optional, but was a nice indicator to verify that the custom kernel build and installation is working
as intended. We’ll modify our <code class="language-plaintext highlighter-rouge">coreos-scripts</code> repo, changing the OS_NAME from “Container Linux by CoreOS” to
“MediaDepot CoreOS”. This simple change will allow us to verify that our customized image (with our kernel changes)
was correctly installed on our server.</p>

<div class="github-widget" data-repo="mediadepot/coreos-scripts"></div>

<p>We’ll make this change in <code class="language-plaintext highlighter-rouge">build_library/set_lsb_release</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat coreos-scripts/build_library/set_lsb_release

...

OS_NAME="MediaDepot CoreOS"
</code></pre></div></div>

<p>Here’s a <a href="https://github.com/mediadepot/coreos-scripts/compare/build-1911...mediadepot:mediadepot">diff showing my changes to the <code class="language-plaintext highlighter-rouge">mediadepot/coreos-scripts</code> repo</a></p>

<h1 id="hosting-coreos-images">Hosting CoreOS images</h1>
<p>Once we build our custom <code class="language-plaintext highlighter-rouge">.bin</code> and <code class="language-plaintext highlighter-rouge">.iso</code> files, we’ll need to get them off our VM and onto a webserver
that we can use to host our images.</p>

<p>The <code class="language-plaintext highlighter-rouge">coreos_install</code> script expects your <code class="language-plaintext highlighter-rouge">.bin</code> file to exist in a specific folder structure:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>${BASE_URL}/${COREOS_VERSION}/coreos_production_image.bin.bz2
${BASE_URL}/current/version.txt
</code></pre></div></div>
<p><code class="language-plaintext highlighter-rouge">${BASE_URL}/current/version.txt</code> should be the <code class="language-plaintext highlighter-rouge">version.txt</code> generated for the most recent build. Its how <code class="language-plaintext highlighter-rouge">coreos_installer</code> knows which is the current version.</p>

<h2 id="automatic-deployment-to-gcp-storage">Automatic Deployment to GCP Storage</h2>

<p>While we could just manually upload these files to our webserver, the CoreOS developers have added built in support for GCP
hosting into their scripts. All we need to do is provide the credentials to our GCP account.</p>

<p>We’ll need to do the following:</p>

<ol>
  <li>Create a GCP Account</li>
  <li><a href="https://cloud.google.com/resource-manager/docs/creating-managing-projects">Create a new GCP Project</a></li>
  <li><a href="https://cloud.google.com/storage/docs/creating-buckets">Create a Storage Bucket</a></li>
  <li><a href="https://cloud.google.com/storage/docs/access-control/making-data-public#buckets">Make sure the Bucket is Publically Readable</a></li>
  <li><a href="https://cloud.google.com/iam/docs/creating-managing-service-accounts">Create a new Service Account</a>
    <ul>
      <li>Make sure you give it the <code class="language-plaintext highlighter-rouge">Storage Account Admin</code> role (it will need permissions to upload and overwrite files)</li>
      <li>Create a Private Key, and export as JSON.</li>
    </ul>
  </li>
  <li>Rename your Private Key JSON file on your host machine, and move it to the following path <code class="language-plaintext highlighter-rouge">~/.config/gcloud/application_default_credentials.json</code></li>
</ol>

<p>Once you’ve done that setup, we’ll need to pass this key file from your host machine into Vagrant, and then update the <code class="language-plaintext highlighter-rouge">provisioner.sh</code> script to handle the credentials.
We’ll do that in the next section:</p>

<h1 id="building-our-customized-coreos-image">Building our customized CoreOS Image</h1>
<p>Now we’re finally ready to build our custom CoreOS images, lets look at our updated <code class="language-plaintext highlighter-rouge">Vagrantfile</code> and <code class="language-plaintext highlighter-rouge">provisioner.sh</code></p>

<div class="github-widget" data-repo="mediadepot/vagrant-coreos-kernel-builder"></div>

<h2 id="vagrantfile">Vagrantfile</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>Vagrantfile

Vagrant.configure<span class="o">(</span><span class="s2">"2"</span><span class="o">)</span> <span class="k">do</span> |config|
    config.vm.box <span class="o">=</span> <span class="s2">"centos/7"</span>
    config.vm.provider <span class="s2">"virtualbox"</span> <span class="k">do</span> |v|
        v.name <span class="o">=</span> <span class="s2">"coreos_builder"</span>
        v.memory <span class="o">=</span> 11264
        v.cpus <span class="o">=</span> 4
    end

    <span class="c"># create the gsutil config file. It'll be created on the Host and copied into the VM, where it'll be parsed and a boto file will be created in the chroot.</span>
    config.vm.provision <span class="s2">"file"</span>, <span class="nb">source</span>: <span class="s2">"~/.config/gcloud/application_default_credentials.json"</span>, destination: <span class="s2">"/home/vagrant/.config/gcloud/application_default_credentials.json"</span>

    config.vm.provision <span class="s2">"shell"</span>, path: <span class="s2">"provisioner.sh"</span>
end

</code></pre></div></div>

<p>Note the change copying the <code class="language-plaintext highlighter-rouge">application_default_credentials.json</code> from the Host into the VM above.</p>

<h2 id="provisionersh">Provisioner.sh</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">cat </span>provisioner.sh

<span class="c">#!/usr/bin/env bash</span>
<span class="nb">set</span> <span class="nt">-e</span>
<span class="nb">set</span> <span class="nt">-o</span> pipefail
<span class="c">## Prerequisites</span>

yum <span class="nb">install</span> <span class="nt">-y</span> <span class="se">\</span>
    ca-certificates <span class="se">\</span>
    curl <span class="se">\</span>
    git <span class="se">\</span>
    bzip2

<span class="nb">cd</span> /usr/bin <span class="o">&amp;&amp;</span> <span class="se">\</span>
    curl <span class="nt">-L</span> <span class="nt">-o</span> cork https://github.com/coreos/mantle/releases/download/v0.11.1/cork-0.11.1-amd64 <span class="o">&amp;&amp;</span> <span class="se">\</span>
    <span class="nb">chmod</span> +x cork <span class="o">&amp;&amp;</span> <span class="se">\</span>
    which cork

<span class="c">## Using Cork</span>
<span class="c"># https://coreos.com/os/docs/latest/sdk-modifying-coreos.html=</span>

<span class="nb">exec sudo</span> <span class="nt">-u</span> vagrant /bin/sh - <span class="o">&lt;&lt;</span> <span class="sh">'</span><span class="no">EOF</span><span class="sh">'
set -e
set -o pipefail
whoami

git config --global user.email "jason@thesparktree.com" &amp;&amp; </span><span class="se">\</span><span class="sh">
git config --global user.name "Jason Kulatunga"

mkdir -p ~/coreos-sdk
cd ~/coreos-sdk
cork create --manifest-url=https://github.com/mediadepot/coreos-manifest.git --manifest-branch=mediadepot
#
cork enter
grep NAME /etc/os-release
env

./set_shared_user_password.sh mediadepot &amp;&amp; </span><span class="se">\</span><span class="sh">
./setup_board --board 'amd64-usr' &amp;&amp; </span><span class="se">\</span><span class="sh">
./build_packages --board 'amd64-usr' &amp;&amp; </span><span class="se">\</span><span class="sh">
./build_image --board 'amd64-usr' prod --upload_root "gs://mediadepot-coreos" --upload &amp;&amp; </span><span class="se">\</span><span class="sh">
./image_to_vm.sh --from=../build/images/amd64-usr/developer-latest --format=iso --board=amd64-usr --upload_root "gs://mediadepot-coreos" --upload &amp;&amp; </span><span class="se">\</span><span class="sh">

# mark this current build as the latest.
gsutil cp ../build/images/amd64-usr/developer-latest/version.txt "gs://mediadepot-coreos/boards/amd64-usr/current/version.txt"

cat ../build/images/amd64-usr/developer-latest/version.txt
</span><span class="no">EOF



</span></code></pre></div></div>

<p>The primary change we made was to add <code class="language-plaintext highlighter-rouge">--manifest-url</code> and <code class="language-plaintext highlighter-rouge">--manifest-branch</code> flags to to the <code class="language-plaintext highlighter-rouge">cork create</code> command, specifying
our forked repo and branch.</p>

<p>You’ll also note the following changes:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">./setup_board</code> and <code class="language-plaintext highlighter-rouge">--board</code> -  <strong>when building a custom CoreOS manifest, you need to specify a board otherwise your build will fail</strong>. While I’m not quite clear why its necessary, running <code class="language-plaintext highlighter-rouge">setup_board</code> and passing a <code class="language-plaintext highlighter-rouge">--board 'amd64-usr'</code> parameter to subsequent commands seemed to fix the issues.</li>
  <li><code class="language-plaintext highlighter-rouge">--upload</code> and <code class="language-plaintext highlighter-rouge">--upload_root</code> - this informs the relevant scripts that they should check for boto credentials and upload the completed files to the specified GCP storage bucket (with the correct folder structure)</li>
  <li><code class="language-plaintext highlighter-rouge">gsutil cp</code> - this command will copy a file to the storage bucket, specifying that the “current” version is the one that we just uploaded.</li>
</ul>

<p>All that left now is to run <code class="language-plaintext highlighter-rouge">vagrant destroy -f &amp;&amp; vagrant up</code>.</p>

<p><code class="language-plaintext highlighter-rouge">vagrant destroy -f</code> will completely destroy our existing VM, the one we used to build our vanilla CoreOS source. Then we’ll
go rebuild a new VM and provision it with our new script using <code class="language-plaintext highlighter-rouge">vagrant up</code>.</p>

<p><img src="https://blog.thesparktree.com/assets/images/coreos/sdk_complete_custom.png" alt="sdk complete custom" /></p>

<h1 id="installing-our-custom-image">Installing our custom Image</h1>

<p>Now that we’ve created our custom <code class="language-plaintext highlighter-rouge">.iso</code> and <code class="language-plaintext highlighter-rouge">.bin</code> files, and made them accessible by our servers, it’s time to create a bootable USB drive or CD, and install CoreOS on our server.</p>

<p>We’ll be creating a bootable USB key.
My favorite tools for doing this are <a href="https://www.balena.io/etcher/">balenaEtcher</a> (macOS, Windows, Linux) and <a href="https://rufus.ie/en_IE.html">Rufus</a> (Windows).
First we’ll the <code class="language-plaintext highlighter-rouge">coreos_production_iso_image.iso</code> from the GCP storage bucket, and then follow the instructions for our chosen tool, making sure to select our <code class="language-plaintext highlighter-rouge">.iso</code> as the base image.</p>

<h2 id="create-an-ignitionjson-file">Create an ignition.json file.</h2>
<p>As part of CoreOS’s headless and security decisions, password authentication is disabled by default. This means that without adding an SSH key for the <code class="language-plaintext highlighter-rouge">core</code> user, we won’t be able to login
to our new server.</p>

<p>CoreOS supports a couple of methods for configuration management, but the current recommended one is <code class="language-plaintext highlighter-rouge">ignition</code>. Since all we want to do is SSH onto our server and
verify that our custom CoreOS install is working, lets create a barebones <code class="language-plaintext highlighter-rouge">ignition.json</code> file on our computer.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat ignition.json
{
  "ignition": {
    "config": {},
    "security": {
      "tls": {}
    },
    "timeouts": {},
    "version": "2.2.0"
  },
  "networkd": {
  },
  "passwd": {
    "users": [
      {
        "name": "core",
        "sshAuthorizedKeys": [
          "ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAIEA0QIsn450XjpKdoAicWqu6pgoc7h+lUokibTF75NcLVhrhnOn8aVpV+MemlE6kt6wjZDK7WyTEX1+/4dIFwH92+TJwBRKG8Yd0aTFHjWZg7K/dZAak041sF21D9K+7R0PtZK/B6szbdN9bZtwss2ebuzMu9Pxw3Rzq/PsPfl9nzs="
        ]
      }
    ]
  },
  "storage": {
  },
  "systemd": {
  }
}
</code></pre></div></div>

<p>You’ll want to ensure that you replace my ssh public key in <code class="language-plaintext highlighter-rouge">sshAuthorizedKeys</code> with yours (check <code class="language-plaintext highlighter-rouge">~/.ssh/id_rsa.pub</code>)</p>

<p>After that we’ll want to place it somewhere accessible to the server we’ll be installing CoreOS on. <a href="https://transfer.sh/">https://transfer.sh/</a> works in a pinch.</p>

<p><code class="language-plaintext highlighter-rouge">curl --upload-file ./ignition.json https://transfer.sh/ignition.json</code></p>

<h2 id="boot-our-server-from-usb">Boot our Server from USB</h2>

<p>Next we’ll boot our server from this USB. There’s many ways to do this, so you’ll need to figure this out on your own, usually there’s an option in your BIOS to boot from a specific disk/USB.</p>

<p>Once we’ve booted into CoreOS from the USB, it’s time to download our <code class="language-plaintext highlighter-rouge">ignition.json</code> file and run the CoreOS installer.
This should install our customized version of CoreOS, if everything worked correctly.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## SERVER ##

# replace the URL below with your transfer.sh url.
curl -O -L https://transfer.sh/vteIu/ignition.json

cat ignition.json # make sure the public key here matches the public key on your host machine

# determine the correct hard disk to install CoreOS on
sudo fdisk -l

# start the CoreOS installer
# make sure you replace `/dev/sda` with the correct hard disk for your machine.
# YOU WILL LOSE DATA IF YOU SELECT THE WRONG DISK

sudo coreos-install -d /dev/sda -V current -i ignition.json
</code></pre></div></div>

<p>Once <code class="language-plaintext highlighter-rouge">coreos-install</code> completes, you’ll need to eject your USB drive and restart your server. On startup the config from
the <code class="language-plaintext highlighter-rouge">ignition.json</code> file we specified will be used to configure the Server, allowing us to ssh as the <code class="language-plaintext highlighter-rouge">core</code> user.</p>

<h2 id="validate-custom-coreos-install">Validate Custom CoreOS install</h2>

<p>After we ssh onto our server (<code class="language-plaintext highlighter-rouge">ssh core@{{SERVER_IP}}</code>) we can verify that our custom CoreOS image has been installed:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## SERVER ##

cat /etc/lsb-release

DISTRIB_ID="MediaDepot CoreOS"
DISTRIB_RELEASE=1911.4.0+2018-12-22-0018
DISTRIB_CODENAME="Rhyolite"
DISTRIB_DESCRIPTION="MediaDepot CoreOS 1911.4.0+2018-12-22-0018 (Rhyolite)"
</code></pre></div></div>

<h1 id="automatic-custom-coreos-builds">Automatic Custom CoreOS Builds</h1>

<p>In Part 3 of this series I’ll discuss the steps required to re-enable the automatic CoreOS kernel updates,
including GPG signing &amp; validation of the <code class="language-plaintext highlighter-rouge">.iso</code> and <code class="language-plaintext highlighter-rouge">.bin</code> files.</p>

<h1 id="fin">Fin</h1>


	  ]]></description>
	</item>

	<item>
	  <title>Customize the CoreOS Kernel - Part 1 - Kernel Modules</title>
	  <link>/customize-coreos-kernel-part-1</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2018-12-09T03:19:33-06:00</pubDate>
	  <guid>/customize-coreos-kernel-part-1</guid>
	  <description><![CDATA[
	     <h1 id="story-time">Story Time</h1>

<p>As a Devops &amp; Infrastructure guy, I’m pretty comfortable with jumping into the unknown, be it infrastructure, architecture or application code.
With a bit of help from Google I can usually come up with a working solution, even if the end result needs a bit of polish afterwards.</p>

<p>That self-assurance was checked on my latest project: <strong>building a dockerized home server.</strong></p>

<p>I’ve touched on my home server a bit in the past, and I’ll be doing a follow up post on it later, but here’s a quick summary of what it does:</p>

<ul>
  <li>Its a home server, so it needed to be physically small and quiet, but easy to upgrade.</li>
  <li>Storage space was more important than content archival, so a JBOD disk array was required</li>
  <li>All applications should run in Docker where possible, for ease of installation, minimizing conflicts and updating.</li>
  <li><strong>OS needed to be as minimal as possible, since all work was done in Docker containers</strong></li>
</ul>

<p>I’ve had a Home Server that checked off the first three items for a while, but not that last one. Professionally, I’ve been lucky enough to
use (and abuse) a Kubernetes cluster which builds our Jenkins jobs. That Kubernetes cluster was built ontop of <del>CoreOS</del> Container Linux, which
I’ve grown to love. It checks off that last requirement perfectly.</p>

<p>So I did what any tinkerer would do, I started up a CoreOS VM, rebuilt my entire software stack for another OS, learned a compeletely new
configuration management tool (<a href="https://github.com/mediadepot/ignition">Ignition</a> is pretty slick), and finally wiped my server’s OS and installed CoreOS
&amp; my dockerized applications.</p>

<p>This is where our story actually begins, which will eventually lead me down a rabbit hole of device drivers &amp; kernel modules.</p>

<p><strong>The <code class="language-plaintext highlighter-rouge">/dev/dri</code> folder was missing on CoreOS.</strong></p>

<p>I eventually got around to starting up Plex on my homeserver, and while everything looked fine, I noticed that the container was not automatically doing Hardware Transcoding
for video, like it should be.
After doing a bunch of debugging I determined that I needed to compile the CoreOS Kernel with a couple of extra options enabled:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">Direct Rendering Manager (XFree86 4.1.0 and higher DRI support)</code></li>
  <li><code class="language-plaintext highlighter-rouge">Intel 8xx/9xx/G3x/G4x/HD Graphics</code></li>
</ul>

<p>Here’s <strong>Problem #1</strong>. If you’re unfamiliar with CoreOS, all you need to know is that unlike traditional OS’s the CoreOS kernel is
continuously updated, similar to how Google Chrome is always kept up-to date. This means that <strong>any local modifications I make to the kernel
will be completely lost on the next kernel update</strong>.</p>

<p>Thankfully kernel developers have provided a way to load code into the kernel, without recompiling the whole thing: kernel modules.</p>

<h1 id="compiling-coreos-kernel-modules-in-tree-or-out-of-tree">Compiling CoreOS Kernel Modules (In-Tree or Out-Of-Tree)</h1>
<p>Here’s where we end story time and actually start coding.</p>

<p>CoreOS is so minimal that it doesn’t even have a any compilers or even a package manager installed.
In fact, it’s designed such that all real work takes place inside of containers.</p>

<p>But before we can even do much work towards solving Problem #1, we run into <strong>Problem #2: the standard location for storing kernel modules <code class="language-plaintext highlighter-rouge">/lib/modules</code> is read-only in CoreOS.</strong>
If you think about it, it kind of all makes sense: an OS that auto-updates its kernel needs to ensure that it controls all locations where
kernel code is loaded from.</p>

<p>We’ll solve Problem #2 first, by creating a <code class="language-plaintext highlighter-rouge">overlay</code> filesystem over the standard <code class="language-plaintext highlighter-rouge">/lib/modules</code> directory. This overlay filesystem will
leave the underlying directory untouched, while creating a new writable directory where we can place our kernel modules.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## HOST ##</span>

<span class="nv">modules</span><span class="o">=</span>/opt/modules  <span class="c"># Adjust this writable storage location as needed.</span>
<span class="nb">sudo mkdir</span> <span class="nt">-p</span> <span class="s2">"</span><span class="nv">$modules</span><span class="s2">"</span> <span class="s2">"</span><span class="nv">$modules</span><span class="s2">.wd"</span>
<span class="nb">sudo </span>mount <span class="se">\</span>
    <span class="nt">-o</span> <span class="s2">"lowerdir=/lib/modules,upperdir=</span><span class="nv">$modules</span><span class="s2">,workdir=</span><span class="nv">$modules</span><span class="s2">.wd"</span> <span class="se">\</span>
    <span class="nt">-t</span> overlay overlay /lib/modules
</code></pre></div></div>

<p>Next we’ll add an entry to <code class="language-plaintext highlighter-rouge">/etc/fstab</code> to ensure that we automatically mount the overlay when the system boots</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## HOST ##</span>

<span class="nv">$ </span><span class="nb">cat</span> /etc/fstab

overlay /lib/modules overlay <span class="nv">lowerdir</span><span class="o">=</span>/lib/modules,upperdir<span class="o">=</span>/opt/modules,workdir<span class="o">=</span>/opt/modules.wd,nofail 0 0

</code></pre></div></div>

<p>Now that Problem #2 is solved, lets go back to Problem #1: the lack of a package manager and compilation tools in CoreOS.
Thankfully the CoreOS developers provide a <code class="language-plaintext highlighter-rouge">develoment container</code>, which has a bunch of tools that can be used to manipulate CoreOS (and includes a package manager).</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## HOST ##</span>

<span class="c"># change to a well known location, with enough space for atleast a 3GB image</span>
<span class="nb">cd</span> ~


<span class="c"># read system configuration files to determine the URL of the development container that corresponds to the current Container Linux version</span>

<span class="nb">.</span> /usr/share/coreos/release
<span class="nb">.</span> /usr/share/coreos/update.conf
<span class="nv">url</span><span class="o">=</span><span class="s2">"http://</span><span class="k">${</span><span class="nv">GROUP</span><span class="k">:-</span><span class="nv">stable</span><span class="k">}</span><span class="s2">.release.core-os.net/</span><span class="nv">$COREOS_RELEASE_BOARD</span><span class="s2">/</span><span class="nv">$COREOS_RELEASE_VERSION</span><span class="s2">/coreos_developer_container.bin.bz2"</span>

<span class="c"># Download, decompress, and verify the development container image.</span>

gpg2 <span class="nt">--recv-keys</span> 04127D0BFABEC8871FFB2CCE50E0885593D2DCB4  <span class="c"># Fetch the buildbot key if neccesary.</span>
curl <span class="nt">-L</span> <span class="s2">"</span><span class="nv">$url</span><span class="s2">"</span> |
    <span class="nb">tee</span> <span class="o">&gt;(</span>bzip2 <span class="nt">-d</span> <span class="o">&gt;</span> coreos_developer_container.bin<span class="o">)</span> |
    gpg2 <span class="nt">--verify</span> &lt;<span class="o">(</span>curl <span class="nt">-Ls</span> <span class="s2">"</span><span class="nv">$url</span><span class="s2">.sig"</span><span class="o">)</span> -

</code></pre></div></div>
<p>Now that we’ve downloaded the developement container image (<code class="language-plaintext highlighter-rouge">coreos_developer_container.bin</code>) we can create a container based off of it.
<strong>Problem #3</strong> rears its ugly head now: <strong>containers created via <code class="language-plaintext highlighter-rouge">systemd-nspawn</code> seem to have a diskspace limit of ~3GB.</strong> This can be fixed by
doing a couple of additional volume mounts when starting the container:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## HOST ##</span>

<span class="nb">cd</span> ~
<span class="nb">mkdir </span>boot src

<span class="nb">sudo </span>systemd-nspawn <span class="se">\</span>
<span class="nt">--bind</span><span class="o">=</span>/tmp <span class="se">\</span>
<span class="nt">--bind</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PWD</span><span class="s2">/boot:/boot"</span> <span class="se">\</span>
<span class="nt">--bind</span><span class="o">=</span>/lib/modules:/lib/modules <span class="se">\</span>
<span class="nt">--bind</span><span class="o">=</span><span class="s2">"</span><span class="nv">$PWD</span><span class="s2">/src:/usr/src"</span> <span class="se">\</span>
<span class="nt">--image</span><span class="o">=</span>coreos_developer_container.bin
</code></pre></div></div>

<h2 id="inside-coreos-development-container">Inside CoreOS Development Container</h2>

<p>Now that we’re inside the development container, we’ll update the package manager and download the coreos kernel source</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## DEVELOPMENT CONTAINER ##</span>

emerge-gitclone
emerge <span class="nt">-gKv</span> bootengine coreos-sources dracut
update-bootengine <span class="nt">-o</span> /usr/src/linux/bootengine.cpio

</code></pre></div></div>

<h2 id="configure-kernel-options">Configure Kernel Options</h2>
<p>The kernel source for the current kernel will be downloaded to the following path <code class="language-plaintext highlighter-rouge">/usr/src/linux-$(uname -r)</code> and symlinked to <code class="language-plaintext highlighter-rouge">/usr/src/linux</code>.
Lets configure the kernel options to enable the I915 driver (and it’s dependencies) to be built as a kernel module.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## DEVELOPMENT CONTAINER ##</span>

<span class="nb">cd</span> /usr/src/linux  <span class="c"># remember, this is a symlink to your exact kernel source code</span>

<span class="c"># lets ensure we're working from a clean copy of the source tree.</span>
make distclean

<span class="c"># lets copy over the symbols file for the current kernel</span>
<span class="nb">cp</span> /lib/modules/<span class="sb">`</span><span class="nb">uname</span> <span class="nt">-r</span><span class="sb">`</span>/build/Module.symvers <span class="nb">.</span>

<span class="c"># lets copy over the .config used to build the current kernel</span>
<span class="nb">gzip</span> <span class="nt">-cd</span> /proc/config.gz <span class="o">&gt;</span> /usr/src/linux/.config

<span class="c"># lets backup the current config</span>
make oldconfig

<span class="c"># lets use the interactive UI to enable the options that we need to enable.</span>
<span class="c"># remember, "m" means build as module.</span>
make menuconfig

<span class="c"># next lets prepare the source code to be built</span>
make prepare <span class="o">&amp;&amp;</span> make modules_prepare
make <span class="nt">-C</span> /usr/src/linux scripts

<span class="c"># (OPTIONAL) finally, lets validate that the options we need are enabled.</span>
<span class="nb">cat</span> .config | <span class="nb">grep </span>DRM
diff .config.old .config

</code></pre></div></div>

<h2 id="build--install-kernel-modules">Build &amp; Install Kernel Module(s)</h2>

<p>Initially all I did here was build the one module I thought was necessary: <code class="language-plaintext highlighter-rouge">/drivers/drm</code>, but after taking a closer look
at the output of <code class="language-plaintext highlighter-rouge">diff .config.old .config</code> it’s clear that a couple of other kernel options were enabled as well, and their modules are dependencies for
the <code class="language-plaintext highlighter-rouge">Intel i915 driver</code> to work correctly.</p>

<p>The general form for building and installing a kernel module looks like the following:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## DEVELOPMENT CONTAINER ###</span>
make <span class="nt">-C</span> /usr/src/linux <span class="nv">SUBDIRS</span><span class="o">=</span>drivers/gpu/drm modules <span class="o">&amp;&amp;</span> make <span class="nt">-C</span> /usr/src/linux <span class="nv">SUBDIRS</span><span class="o">=</span>drivers/gpu/drm modules_install
</code></pre></div></div>

<p>However, since there’s additional kernel modules that we need, the full build command looks like:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## DEVELOPMENT CONTAINER ###</span>

make <span class="nt">-C</span> /usr/src/linux <span class="nv">M</span><span class="o">=</span>drivers/video modules <span class="o">&amp;&amp;</span> <span class="se">\</span>
make <span class="nt">-C</span> /usr/src/linux <span class="nv">M</span><span class="o">=</span>drivers/video modules_install

make <span class="nt">-C</span> /usr/src/linux <span class="nv">M</span><span class="o">=</span>drivers/acpi <span class="nv">KBUILD_EXTMOD</span><span class="o">=</span>drivers/video modules <span class="o">&amp;&amp;</span> <span class="se">\</span>
make <span class="nt">-C</span> /usr/src/linux <span class="nv">M</span><span class="o">=</span>drivers/acpi <span class="nv">KBUILD_EXTMOD</span><span class="o">=</span>drivers/video modules_install

make <span class="nt">-C</span> /usr/src/linux <span class="nv">M</span><span class="o">=</span>drivers/gpu/drm <span class="nv">KBUILD_EXTMOD</span><span class="o">=</span>drivers/acpi <span class="nv">KBUILD_EXTMOD</span><span class="o">=</span>drivers/video modules <span class="o">&amp;&amp;</span> <span class="se">\</span>
make <span class="nt">-C</span> /usr/src/linux <span class="nv">M</span><span class="o">=</span>drivers/gpu/drm <span class="nv">KBUILD_EXTMOD</span><span class="o">=</span>drivers/acpi <span class="nv">KBUILD_EXTMOD</span><span class="o">=</span>drivers/video modules_install
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">make modules</code> command will build &amp; compile the <code class="language-plaintext highlighter-rouge">.ko</code> files, while the <code class="language-plaintext highlighter-rouge">make modules_install</code> command will copy them to the <code class="language-plaintext highlighter-rouge">/lib/modules/$(uname -r)/extras/</code> directory.
Lets validate that the kernel modules we require are all there:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>## DEVELOPMENT CONTAINER ##
ls -alt /lib/modules/$(uname -r)/extras/

# if everything looks good, we can exit from the container back to the host

exit

</code></pre></div></div>

<h2 id="prepare-kernel-modules">Prepare Kernel Modules</h2>
<p>So at this point we have a handful of kernel modules, but we’re not quite ready to load them into the kernel yet. We need to run a tool called <code class="language-plaintext highlighter-rouge">depmod</code> first</p>

<blockquote>
  <p>depmod creates a list of module dependencies by reading each module under <em>/lib/modules/version</em> and determining what symbols
it exports and what symbols it needs. By default, this list is written to <em>modules.dep</em> in the same directory. If
filenames are given on the command line, only those modules are examined (which is rarely useful unless all modules are listed).</p>
</blockquote>

<p>Lets run it on the host, to update the <code class="language-plaintext highlighter-rouge">modules.dep</code> file.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## HOST ##</span>
depmod
</code></pre></div></div>

<p>Well that was easy.</p>

<h2 id="load-kernel-modules">Load Kernel Modules</h2>

<p>Here we are at the moment of truth, lets load our kernel modules into the kernel using <code class="language-plaintext highlighter-rouge">modprobe</code>. If we did everything right the command should complete silently for each module.</p>

<blockquote>
  <p>modprobe intelligently adds or removes a module from the Linux kernel: note that for convenience, there is no difference between _ and - in module names. modprobe looks in the module directory /lib/modules/’uname -r’ for all the modules and other files, except for the optional /etc/modprobe.conf configuration file and /etc/modprobe.d directory (see modprobe.conf(5)). modprobe will also use module options specified on the kernel command line in the form of <module>.<option>.</option></module></p>
</blockquote>

<p>The modules in <code class="language-plaintext highlighter-rouge">/lib/modules/$(uname -r)/extras</code> should be individually loaded via <code class="language-plaintext highlighter-rouge">modprobe</code>. Note: when using modprobe, you reference kernel modules by name, not path, ie. <code class="language-plaintext highlighter-rouge">modprobe i915</code> not <del><code class="language-plaintext highlighter-rouge">modprobe i915/i915.ko</code></del></p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## HOST ##</span>
modprobe acpi_ipmi
...
</code></pre></div></div>

<p>Once we’ve completed the dependent modules, lets load the modules we actually care about <code class="language-plaintext highlighter-rouge">drm</code>, <code class="language-plaintext highlighter-rouge">drm_kms_helper</code> and <code class="language-plaintext highlighter-rouge">i915</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">## HOST ##</span>
<span class="nv">$ </span>modprobe drm_kms_helper
modprobe: ERROR: could not insert <span class="s1">'drm_kms_helper'</span>: Unknown symbol <span class="k">in </span>module, or unknown parameter <span class="o">(</span>see dmesg<span class="o">)</span>
</code></pre></div></div>

<p>Uh oh. Lets look at the logs in <code class="language-plaintext highlighter-rouge">dmesg</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>[83845.709910] drm: Unknown symbol hdmi_vendor_infoframe_init (err 0)
[83845.710508] drm: Unknown symbol dma_fence_add_callback (err 0)
[83845.711248] drm: Unknown symbol dma_buf_attach (err 0)
[83845.711921] drm: Unknown symbol dma_fence_default_wait (err 0)
[83845.712474] drm: Unknown symbol dma_buf_export (err 0)
[83845.712884] drm: Unknown symbol dma_buf_map_attachment (err 0)
[83845.713648] drm: Unknown symbol dma_fence_remove_callback (err 0)
[83845.714288] drm: Unknown symbol dma_buf_unmap_attachment (err 0)
[83845.714946] drm: Unknown symbol dma_fence_context_alloc (err 0)
[83845.715508] drm: Unknown symbol dma_fence_signal (err 0)
[83845.716182] drm: Unknown symbol dma_buf_get (err 0)
[83845.716762] drm: Unknown symbol dma_buf_put (err 0)
[83845.717257] drm: Unknown symbol dma_buf_fd (err 0)
[83845.717843] drm: Unknown symbol dma_fence_init (err 0)
[83845.718371] drm: Unknown symbol hdmi_avi_infoframe_init (err 0)
[83845.719094] drm: Unknown symbol dma_fence_enable_sw_signaling (err 0)
[83845.719835] drm: Unknown symbol dma_buf_detach (err 0)
[83845.720422] drm: Unknown symbol dma_fence_release (err 0)
[83845.721103] drm: Unknown symbol sync_file_get_fence (err 0)
[83845.721771] drm: Unknown symbol sync_file_create (err 0)
</code></pre></div></div>

<p>Looks like we’ve hit <strong>Problem #4: there’s some additional dependencies that we need to enable as modules.</strong></p>

<p>Lets check for <code class="language-plaintext highlighter-rouge">hdmi_vendor_infoframe_init</code> first. In our case we’re building off the linux kernel used by CoreOS, so
we’ll do a search of the source code in the <code class="language-plaintext highlighter-rouge">github.com/coreos/linux</code> repo.</p>

<p>It looks like the symbol is exported in the <a href="https://github.com/coreos/linux/blob/v4.14.81/drivers/video/hdmi.c">drivers/video/hdmi.c</a> file.
Now lets look at the <a href="https://github.com/coreos/linux/blob/v4.14.81/drivers/video/Makefile">Makefile in the video directory</a> to determine which kernel config flag controls this file:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>..
<span class="c"># SPDX-License-Identifier: GPL-2.0</span>
obj-<span class="si">$(</span>CONFIG_VGASTATE<span class="si">)</span>            +<span class="o">=</span> vgastate.o
obj-<span class="si">$(</span>CONFIG_HDMI<span class="si">)</span>                +<span class="o">=</span> hdmi.o

obj-<span class="si">$(</span>CONFIG_VT<span class="si">)</span>		  +<span class="o">=</span> console/
..
</code></pre></div></div>

<p>Looks like the <code class="language-plaintext highlighter-rouge">CONFIG_HDMI</code> option controls the inclusion of the <code class="language-plaintext highlighter-rouge">hdmi.c</code> file. Perfect.</p>

<p>Now lets check the <a href="https://github.com/coreos/linux/blob/v4.14.81/drivers/video/Kconfig"><code class="language-plaintext highlighter-rouge">Kconfig</code> file</a> for more information about the <code class="language-plaintext highlighter-rouge">CONFIG_HDMI</code> option.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
config HDMI
	bool

</code></pre></div></div>

<p>After looking at the <code class="language-plaintext highlighter-rouge">Kconfig</code> file and the <code class="language-plaintext highlighter-rouge">Makefile</code> closely, it seems that there is no configuration available to build <code class="language-plaintext highlighter-rouge">hdmi.c</code>
file into a kernel module. This is confirmed when we run <code class="language-plaintext highlighter-rouge">make menuconfig</code>, press <code class="language-plaintext highlighter-rouge">/</code> to search, and enter <code class="language-plaintext highlighter-rouge">HDMI</code>.</p>

<p><img src="https://blog.thesparktree.com/assets/images/coreos/make_menuconfig.png" alt="make menuconfig" /></p>

<p>Looks like we’ve hit a dead end.</p>

<p><strong>While we can create kernel modules for the <code class="language-plaintext highlighter-rouge">i915</code> and <code class="language-plaintext highlighter-rouge">drm</code> drivers, the <code class="language-plaintext highlighter-rouge">hdmi.c</code> file cannot be compiled as a module, only included
directly in the kernel as a built-in. In our case <code class="language-plaintext highlighter-rouge">CONFIG_HDMI</code> is set to <code class="language-plaintext highlighter-rouge">n</code> in the CoreOS kernel build.</strong></p>

<h1 id="fin">Fin</h1>

<p>While it looks like I may have to scrap this work and start over from scratch, hopefully your <code class="language-plaintext highlighter-rouge">kernel module</code> does not have any
dependencies that are unavailable as modules.</p>

<p>If you were lucky enough to build a CoreOS kernel module and load it without any issues, you’ll want to look at
<a href="https://gist.github.com/dm0-/0db058ba3a85d55aca99c93a642b8a20">automatically building and loading your kernel modules via a service</a>.
I obviously never got that far.</p>

<p>In Part 2 of this series I’ll walk though the steps as I attempt to build a full custom CoreOS kernel.</p>

<h1 id="special-thanks">Special Thanks</h1>

<p>I’d like to give a special thanks to the following people:</p>

<ul>
  <li>Abylay Ospan</li>
  <li>David Michael</li>
  <li>Ayan Halder</li>
  <li>Mathieu Levallois</li>
</ul>

<h1 id="references">References</h1>
<ul>
  <li>https://wiki.gentoo.org/wiki/Intel#Feature_support - Kernel options required for enabling Intel i915 driver</li>
  <li>https://coreos.com/os/docs/latest/kernel-modules.html - Initial instructions for building a Kernel module</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Jenkins Dockerized Slave Cluster - Premise</title>
	  <link>/jenkins-dockerized-slave-cluster</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2018-03-25T04:19:33-05:00</pubDate>
	  <guid>/jenkins-dockerized-slave-cluster</guid>
	  <description><![CDATA[
	     <p>Here’s the premise, we have one or more Jenkins masters running our various jobs, and the server is bottlenecking: the UI is sluggish, and builds are taking longer than normal. The obvious answer is to add slaves. But multiple Jenkins masters, each with their own dedicated slaves is a lot of compute power, which may be idle most of the time, meaning a lot of wasted money and resources.</p>

<p>Wouldn’t it be nice if we could share slave nodes between the masters? Create a cluster of slave nodes and have the various Jenkins masters run their jobs without needing to worry about scheduling or the underlying utilization of the hardware?</p>

<p>Enter buzzword heaven. In the next few posts I’ll be going through all the steps required to build a Dockerized Jenkins slave cluster.</p>

<ul>
  <li>Part 1 - Our cloud provider will be OpenStack, however we’ll be using Terraform for provisioning, so you could easily migrate my tutorial onto Azure/AWS/GCE or Bare Metal. Our foundation will be a half-dozen vanilla CoreOS machines, which you can resize to your needs.</li>
  <li>Part 2 - On top of that we’ll use kubeadm to bootstrap a best-practice Kubernetes cluster in an easy, reasonably secure and extensible way. No complex configuration-management required.</li>
  <li>Part 3 - Finally, we’ll configure our Jenkins masters to communicate with a single Kubernetes cluster. The Jenkins masters will run jobs in a “cloud” that will transparently spin up Docker containers on demand. Once the job finishes the container is destroyed automatically, freeing up those resources for other masters and their jobs.</li>
</ul>

<p>My goal with these posts are to:</p>

<ol>
  <li>Aggregate all the steps in one place. There’s alot of smart people out there who’ve written various guides doing each of these things individually. I want to aggregate all the steps into one, easy to follow along tutorial</li>
  <li>Break each stage up into comprehendible chunks, and clearly explain how they interact with each other. This allows you to modify my tutorial to suit your needs, while still being able to follow along.</li>
  <li>Provide a real code repository, not just snippets out of context. Sometimes the “obvious” glue code isn’t so obvious. A repo you can grep can save a lot of time.</li>
  <li>Write a continiously updated/evergreen guide following modern best practices. Like code, content also rots – especially quick in the devops &amp; docker world. I’ll be keeping this guide as up-to-date as possible. In addition it’s hosted on Github, so you can submit edits to make each post better.</li>
</ol>


	  ]]></description>
	</item>

	<item>
	  <title>How to setup a Deis (Heroku-like PAAS) on Microsoft Azure using CoreOS</title>
	  <link>/how-to-setup-a-deis-heroku-like-paas-on</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2014-11-22T02:04:00-06:00</pubDate>
	  <guid>/how-to-setup-a-deis-heroku-like-paas-on</guid>
	  <description><![CDATA[
	     <h1 id="prerequisites">Prerequisites</h1>

<h2 id="install-and-configure-the-azure-cli">Install and Configure the Azure CLI</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># If Node.js is installed on your system, use the following command to install the xplat-cli:</span>
<span class="nb">sudo </span>npm <span class="nb">install </span>azure-cli <span class="nt">-g</span>

<span class="c">#To download the publish settings for your account, use the following command:</span>
azure account download

<span class="c">#This will open your default browser and prompt you to sign in to the Azure Management Portal. After signing in, a .publishsettings file will be downloaded. Make note of where this file is saved.</span>

<span class="c">#Next, import the .publishsettings file by running the following command, replacing [path to .publishsettings file] with the path to your .publishsettings file:</span>
azure account import <span class="o">[</span>path to .publishsettings file]
</code></pre></div></div>

<h2 id="azure-configuration">Azure Configuration</h2>
<p>Ok, we’re ready to provision our cluster. We’ll first need to create an affinity group for this cluster so the hosts selected for the CoreOS VMs are close to each other:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>azure account affinity-group create myapp-affinity -l "East US" -e "MyApp Affinity Group"
</code></pre></div></div>

<p>Next, create a cloud service for this cluster. We are going to assign containers to each of the hosts in this cluster to serve web traffic so we want to load balance incoming requests across them using a cloud service. This cloud service name needs to be unique across all of Azure, so choose a unique one:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>azure service create --affinity-group myapp-affinity myapp-cloud-service-name
</code></pre></div></div>

<p>Finally, we will create a virtual private network for our cluster to live inside.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#TODO: this isnt working
azure network vnet create --affinity-group myapp-affinity myapp-network
</code></pre></div></div>

<h2 id="configure-coreos-cloud-configyml-file">Configure CoreOS cloud-config.yml file</h2>

<p>The first thing we need to do is get a discovery token for etcd. ‘etcd’ is a distributed key-value store built on the Raft protocol and acts as a store for configuration information for CoreOS. Fleet, another part of the CoreOS puzzle, is a low-level init system built on ‘etcd’ that provides the functionality of Systemd over a distributed cluster.</p>

<p>This discovery token is configured in the cloud-init file called cloud-config.yml. This configures the CoreOS image once it is provisioned by Azure and, in particular, it injects the etcd discovery token into the virtual machine so that it knows which CoreOS cluster it belongs to. Its important to have a new and unique value for this, otherwise your cluster could fail to initialize correctly.</p>

<p>Let’s provision a new one for our cluster:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://discovery.etcd.io/new
</code></pre></div></div>

<p>This will fetch a discovery URL that looks something like https://discovery.etcd.io/e6a84781d11952da545316cb90c9e9ab. Copy this and edit the <a href="https://raw.githubusercontent.com/deis/deis/master/contrib/coreos/user-data.example">cloud-config.yml</a> file and paste this discovery token into it.</p>

<p><a href="https://raw.githubusercontent.com/deis/deis/master/contrib/coreos/user-data.example">Dies Cloud-Config Example File</a></p>

<h2 id="create-azure-coreos-vm-cluster">Create Azure CoreOS VM Cluster</h2>

<p>Run the folllowing commands to create your Azure VMs. Feel free to configure the size and ports, but be sure to create atleast 3 vms. Deis provisions 3 router services by default, and will hang if only less than 3 servers are present. (https://github.com/deis/deis/issues/2469)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>azure vm create <span class="se">\</span>
<span class="nt">--custom-data</span><span class="o">=</span>cloud-config.yml <span class="se">\</span>
<span class="nt">--vm-size</span><span class="o">=</span>Basic_A1 <span class="se">\</span>
<span class="nt">--ssh</span><span class="o">=</span>22 <span class="se">\</span>
<span class="nt">--ssh-cert</span><span class="o">=</span>../path/to/cert <span class="se">\</span>
<span class="nt">--no-ssh-password</span> <span class="se">\</span>
<span class="nt">--vm-name</span><span class="o">=</span>coreos1 <span class="se">\</span>
<span class="nt">--virtual-network-name</span><span class="o">=</span>myapp-network <span class="se">\</span>
<span class="nt">--affinity-group</span><span class="o">=</span>myapp-affinity <span class="se">\</span>
myapp-cloud-service-name <span class="se">\</span>
2b171e93f07c4903bcad35bda10acf22__CoreOS-Beta-494.0.0 <span class="se">\</span>
core

azure vm create <span class="se">\</span>
<span class="nt">--custom-data</span><span class="o">=</span>cloud-config.yml <span class="se">\</span>
<span class="nt">--vm-size</span><span class="o">=</span>Basic_A1 <span class="se">\</span>
<span class="nt">--ssh</span><span class="o">=</span>2222 <span class="se">\</span>
<span class="nt">--ssh-cert</span><span class="o">=</span>../path/to/cert <span class="se">\</span>
<span class="nt">--no-ssh-password</span> <span class="se">\</span>
<span class="nt">--vm-name</span><span class="o">=</span>coreos2 <span class="se">\</span>
<span class="nt">--virtual-network-name</span><span class="o">=</span>myapp-network <span class="se">\</span>
<span class="nt">--affinity-group</span><span class="o">=</span>myapp-affinity <span class="se">\</span>
<span class="nt">--connect</span>
myapp-cloud-service-name <span class="se">\</span>
2b171e93f07c4903bcad35bda10acf22__CoreOS-Beta-494.0.0 <span class="se">\</span>
core

azure vm create <span class="se">\</span>
<span class="nt">--custom-data</span><span class="o">=</span>cloud-config.yml <span class="se">\</span>
<span class="nt">--vm-size</span><span class="o">=</span>Basic_A1 <span class="se">\</span>
<span class="nt">--ssh</span><span class="o">=</span>2223 <span class="se">\</span>
<span class="nt">--ssh-cert</span><span class="o">=</span>../path/to/cert <span class="se">\</span>
<span class="nt">--no-ssh-password</span> <span class="se">\</span>
<span class="nt">--vm-name</span><span class="o">=</span>coreos3 <span class="se">\</span>
<span class="nt">--virtual-network-name</span><span class="o">=</span>myapp-network <span class="se">\</span>
<span class="nt">--affinity-group</span><span class="o">=</span>myapp-affinity <span class="se">\</span>
<span class="nt">--connect</span>
myapp-cloud-service-name <span class="se">\</span>
2b171e93f07c4903bcad35bda10acf22__CoreOS-Beta-494.0.0 <span class="se">\</span>
core
</code></pre></div></div>

<p>Use the following command to find alternative/newer versions of CoreOS</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>azure vm image list | grep  "CoreOS"
</code></pre></div></div>

<p>Let’s quickly ssh into the first machine in the cluster and check to make sure everything looks ok:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh core@myapp-cloud-service-name.cloudapp.net -p 22 -i ../path/to/cert
</code></pre></div></div>

<p>Let’s first make sure etcd is up and running:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo etcdctl ls --recursive
# /coreos.com
# /coreos.com/updateengine
# /coreos.com/updateengine/rebootlock
# /coreos.com/updateengine/rebootlock/semaphore
</code></pre></div></div>

<p>And that fleetctl knows about all of the members of the cluster:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo fleetctl list-machines
# MACHINE     IP      METADATA
# 36a636af... 10.0.0.4    region=us-east
# 40078616... 10.0.0.5    region=us-east
# f6ebd7d1... 10.0.2.4    region=us-east
</code></pre></div></div>

<p>Finally lets exit from the CoreOS cluster and install the local management tools</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exit
</code></pre></div></div>

<h2 id="install-deis-control-utility">Install Deis Control Utility</h2>
<p>The Deis Control Utility, or <code class="language-plaintext highlighter-rouge">deisctl</code> for short, is a command-line client used to configure and manage the Deis Platform.</p>

<h3 id="building-from-installer">Building from Installer</h3>

<p>To install the latest version of deisctl, change to the directory where you would like to install the binary. Then, install the Deis Control Utility by downloading and running the install script with the following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir /tmp/deisctl
cd /tmp/deisctl
curl -sSL https://deis.io/deisctl/install.sh | sh -s 1.0.1
</code></pre></div></div>

<p>This installs deisctl to the current directory, and refreshes the Deis systemd unit files used to schedule the components. Link it to /usr/local/bin, so it will be in your PATH:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp /tmp/deisctl/deisctl /usr/local/bin/deisctl
</code></pre></div></div>

<p>Always use a version of deisctl that matches the Deis release. Verify this with <code class="language-plaintext highlighter-rouge">deisctl --version</code>.</p>

<h2 id="install-the-deis-platform">Install the Deis Platform</h2>

<p>Ensure your SSH agent is running and select the private key that corresponds to the SSH key added to your CoreOS nodes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="sb">`</span>ssh-agent <span class="nt">-s</span><span class="sb">`</span>
ssh-add ~/.ssh/deis
</code></pre></div></div>

<p>Export it to the DEISCTL_TUNNEL environment variable (substituting your own cloud app service name):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export DEISCTL_TUNNEL="myapp-cloud-service-name.cloudapp.net"
</code></pre></div></div>

<p>This is the IP address where deisctl will attempt to communicate with the cluster. You can test that it is working properly by running deisctl list. If you see a single line of output, the control utility is communicating with the nodes.</p>

<p>Before provisioning the platform, we’ll need to add the SSH key to Deis so it can connect to remote hosts during deis run:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deisctl config platform set sshPrivateKey=~/.ssh/deis
</code></pre></div></div>

<p>We’ll also need to tell the controller which domain name we are deploying applications under:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deisctl config platform set domain=example.com
</code></pre></div></div>

<p>Once finished, run this command to provision the Deis platform:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deisctl install platform
</code></pre></div></div>

<p>You will see output like the following, which indicates that the units required to run Deis have been loaded on the CoreOS cluster:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>● ▴ ■
■ ● ▴ Installing Deis...
▴ ■ ●

Scheduling data containers...
...
Deis installed.
Please run `deisctl start platform` to boot up Deis.
</code></pre></div></div>

<p>Run this command to start the Deis platform:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deisctl start platform
</code></pre></div></div>

<p>Once you see “Deis started.”, your Deis platform is running on a cluster! You may verify that all of the Deis units are loaded and active by running the following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deisctl list
</code></pre></div></div>

<p>All of the units should be active.</p>

<p>Now that you’ve finished provisioning a cluster, we can get started using the platform.</p>

<h2 id="references">References</h2>

<ul>
  <li>https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/</li>
  <li>https://coreos.com/docs/launching-containers/launching/fleet-using-the-client/</li>
  <li>https://coreos.com/docs/running-coreos/cloud-providers/azure/</li>
  <li>https://github.com/timfpark/coreos-azure</li>
  <li>https://docs.deis.io/en/latest/installing_deis/install-deisctl/</li>
  <li>https://docs.deis.io/en/latest/installing_deis/install-platform/</li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
