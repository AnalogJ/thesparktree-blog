<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>blog.thesparktree.com</title>
   
   <link>https://blog.thesparktree.com</link>
   <description>Devops posts & guides about interesting tech like Docker, Letsencrypt, Chef, Angular, Automation, API's or other topics that you should know about. </description>
   <language>en-uk</language>
   <managingEditor> Jason Kulatunga</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Drawbridge - SSH Config management for Jump/Bastion hosts</title>
	  <link>/drawbridge-ssh-config-management</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2018-04-30T04:19:33-05:00</pubDate>
	  <guid>/drawbridge-ssh-config-management</guid>
	  <description><![CDATA[
	     <p>In our architecture we have many environments (test/stage/prod/etc), and each environment can have one or more shards, usually broken up by datacenter/avaliablity zone (us-east-1, us-west-2, etc). Each of our shards are protected by Jump/Bastion hosts, auditing and restricting SSH access to internal components.</p>

<p>For ease of use, tunneling into bastion host protected stacks is usually done by adding entries into your <code class="language-plaintext highlighter-rouge">~/.ssh/config</code> file, however when you start adding dozens of entries, it can be confusing and time consuming.</p>

<p>A while back I made a post on <a href="https://www.reddit.com/r/devops/comments/8aasuw/tools_for_interacting_withmaintaining_configs_for/">/r/devops</a> asking for help finding a tool that would manage/generate ssh config files for all our jump/bastion hosts.</p>

<p>There was some interest (and great discussion), however no-one submitted a tool that solved the actual problem.</p>

<p>Since that post, I’ve worked on an open source tool that implents everything required to work with Bastion/Jump hosts efficiently as a Developer or member of Operations. Its available now on github: <a href="https://github.com/AnalogJ/drawbridge">Drawbridge</a></p>

<h2 id="here-are-some-of-its-features">Here are some of its features:</h2>

<ul>
  <li>Single binary (available for macOS and linux), only depends on <code class="language-plaintext highlighter-rouge">ssh</code>, <code class="language-plaintext highlighter-rouge">ssh-agent</code> and <code class="language-plaintext highlighter-rouge">scp</code></li>
  <li>Uses customizable templates to ensure that Drawbridge can be used by any organization, in any configuraton</li>
  <li>Helps organize your SSH config files and PEM files</li>
  <li>Generates SSH Config files for your servers spread across multiple environments and stacks.
    <ul>
      <li>multiple ssh users/keypairs</li>
      <li>multiple environments</li>
      <li>multiple stacks per environment</li>
      <li>etc..</li>
    </ul>
  </li>
  <li>Can be used to SSH directly into an internal node, routing though bastion, leveraging SSH-Agent</li>
  <li>Able to download files from internal hosts (through the jump/bastion host) using SCP syntax</li>
  <li>Supports HTTP proxy to access internal stack urls.</li>
  <li>Lists all managed config files in a heirarchy that makes sense to your organization</li>
  <li>Custom templated files can be automatically generated when a new SSH config is created.
    <ul>
      <li>eg. Chef knife.rb configs, Pac/Proxy files, etc.</li>
    </ul>
  </li>
  <li>Cleanup utility is built-in</li>
  <li><code class="language-plaintext highlighter-rouge">drawbridge update</code> lets you update the binary inplace.</li>
  <li>Pretty colors. The CLI is all colorized to make it easy to skim for errors/warnings</li>
</ul>

<hr />

<p>You can read more &amp; download it from Github [https://github.com/AnalogJ/drawbridge]</p>

<p>I’m always open to PR’s and feature requests. I’d also love to hear any feedback you guys may have</p>

	  ]]></description>
	</item>

	<item>
	  <title>How to setup a Deis (Heroku-like PAAS) on Microsoft Azure using CoreOS</title>
	  <link>/how-to-setup-a-deis-heroku-like-paas-on</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2014-11-22T02:04:00-06:00</pubDate>
	  <guid>/how-to-setup-a-deis-heroku-like-paas-on</guid>
	  <description><![CDATA[
	     <h1 id="prerequisites">Prerequisites</h1>

<h2 id="install-and-configure-the-azure-cli">Install and Configure the Azure CLI</h2>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># If Node.js is installed on your system, use the following command to install the xplat-cli:</span>
<span class="nb">sudo </span>npm <span class="nb">install </span>azure-cli <span class="nt">-g</span>

<span class="c">#To download the publish settings for your account, use the following command:</span>
azure account download

<span class="c">#This will open your default browser and prompt you to sign in to the Azure Management Portal. After signing in, a .publishsettings file will be downloaded. Make note of where this file is saved.</span>

<span class="c">#Next, import the .publishsettings file by running the following command, replacing [path to .publishsettings file] with the path to your .publishsettings file:</span>
azure account import <span class="o">[</span>path to .publishsettings file]
</code></pre></div></div>

<h2 id="azure-configuration">Azure Configuration</h2>
<p>Ok, we’re ready to provision our cluster. We’ll first need to create an affinity group for this cluster so the hosts selected for the CoreOS VMs are close to each other:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>azure account affinity-group create myapp-affinity -l "East US" -e "MyApp Affinity Group"
</code></pre></div></div>

<p>Next, create a cloud service for this cluster. We are going to assign containers to each of the hosts in this cluster to serve web traffic so we want to load balance incoming requests across them using a cloud service. This cloud service name needs to be unique across all of Azure, so choose a unique one:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>azure service create --affinity-group myapp-affinity myapp-cloud-service-name
</code></pre></div></div>

<p>Finally, we will create a virtual private network for our cluster to live inside.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#TODO: this isnt working
azure network vnet create --affinity-group myapp-affinity myapp-network
</code></pre></div></div>

<h2 id="configure-coreos-cloud-configyml-file">Configure CoreOS cloud-config.yml file</h2>

<p>The first thing we need to do is get a discovery token for etcd. ‘etcd’ is a distributed key-value store built on the Raft protocol and acts as a store for configuration information for CoreOS. Fleet, another part of the CoreOS puzzle, is a low-level init system built on ‘etcd’ that provides the functionality of Systemd over a distributed cluster.</p>

<p>This discovery token is configured in the cloud-init file called cloud-config.yml. This configures the CoreOS image once it is provisioned by Azure and, in particular, it injects the etcd discovery token into the virtual machine so that it knows which CoreOS cluster it belongs to. Its important to have a new and unique value for this, otherwise your cluster could fail to initialize correctly.</p>

<p>Let’s provision a new one for our cluster:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>curl https://discovery.etcd.io/new
</code></pre></div></div>

<p>This will fetch a discovery URL that looks something like https://discovery.etcd.io/e6a84781d11952da545316cb90c9e9ab. Copy this and edit the <a href="https://raw.githubusercontent.com/deis/deis/master/contrib/coreos/user-data.example">cloud-config.yml</a> file and paste this discovery token into it.</p>

<p><a href="https://raw.githubusercontent.com/deis/deis/master/contrib/coreos/user-data.example">Dies Cloud-Config Example File</a></p>

<h2 id="create-azure-coreos-vm-cluster">Create Azure CoreOS VM Cluster</h2>

<p>Run the folllowing commands to create your Azure VMs. Feel free to configure the size and ports, but be sure to create atleast 3 vms. Deis provisions 3 router services by default, and will hang if only less than 3 servers are present. (https://github.com/deis/deis/issues/2469)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>azure vm create <span class="se">\</span>
<span class="nt">--custom-data</span><span class="o">=</span>cloud-config.yml <span class="se">\</span>
<span class="nt">--vm-size</span><span class="o">=</span>Basic_A1 <span class="se">\</span>
<span class="nt">--ssh</span><span class="o">=</span>22 <span class="se">\</span>
<span class="nt">--ssh-cert</span><span class="o">=</span>../path/to/cert <span class="se">\</span>
<span class="nt">--no-ssh-password</span> <span class="se">\</span>
<span class="nt">--vm-name</span><span class="o">=</span>coreos1 <span class="se">\</span>
<span class="nt">--virtual-network-name</span><span class="o">=</span>myapp-network <span class="se">\</span>
<span class="nt">--affinity-group</span><span class="o">=</span>myapp-affinity <span class="se">\</span>
myapp-cloud-service-name <span class="se">\</span>
2b171e93f07c4903bcad35bda10acf22__CoreOS-Beta-494.0.0 <span class="se">\</span>
core

azure vm create <span class="se">\</span>
<span class="nt">--custom-data</span><span class="o">=</span>cloud-config.yml <span class="se">\</span>
<span class="nt">--vm-size</span><span class="o">=</span>Basic_A1 <span class="se">\</span>
<span class="nt">--ssh</span><span class="o">=</span>2222 <span class="se">\</span>
<span class="nt">--ssh-cert</span><span class="o">=</span>../path/to/cert <span class="se">\</span>
<span class="nt">--no-ssh-password</span> <span class="se">\</span>
<span class="nt">--vm-name</span><span class="o">=</span>coreos2 <span class="se">\</span>
<span class="nt">--virtual-network-name</span><span class="o">=</span>myapp-network <span class="se">\</span>
<span class="nt">--affinity-group</span><span class="o">=</span>myapp-affinity <span class="se">\</span>
<span class="nt">--connect</span>
myapp-cloud-service-name <span class="se">\</span>
2b171e93f07c4903bcad35bda10acf22__CoreOS-Beta-494.0.0 <span class="se">\</span>
core

azure vm create <span class="se">\</span>
<span class="nt">--custom-data</span><span class="o">=</span>cloud-config.yml <span class="se">\</span>
<span class="nt">--vm-size</span><span class="o">=</span>Basic_A1 <span class="se">\</span>
<span class="nt">--ssh</span><span class="o">=</span>2223 <span class="se">\</span>
<span class="nt">--ssh-cert</span><span class="o">=</span>../path/to/cert <span class="se">\</span>
<span class="nt">--no-ssh-password</span> <span class="se">\</span>
<span class="nt">--vm-name</span><span class="o">=</span>coreos3 <span class="se">\</span>
<span class="nt">--virtual-network-name</span><span class="o">=</span>myapp-network <span class="se">\</span>
<span class="nt">--affinity-group</span><span class="o">=</span>myapp-affinity <span class="se">\</span>
<span class="nt">--connect</span>
myapp-cloud-service-name <span class="se">\</span>
2b171e93f07c4903bcad35bda10acf22__CoreOS-Beta-494.0.0 <span class="se">\</span>
core
</code></pre></div></div>

<p>Use the following command to find alternative/newer versions of CoreOS</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>azure vm image list | grep  "CoreOS"
</code></pre></div></div>

<p>Let’s quickly ssh into the first machine in the cluster and check to make sure everything looks ok:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh core@myapp-cloud-service-name.cloudapp.net -p 22 -i ../path/to/cert
</code></pre></div></div>

<p>Let’s first make sure etcd is up and running:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo etcdctl ls --recursive
# /coreos.com
# /coreos.com/updateengine
# /coreos.com/updateengine/rebootlock
# /coreos.com/updateengine/rebootlock/semaphore
</code></pre></div></div>

<p>And that fleetctl knows about all of the members of the cluster:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sudo fleetctl list-machines
# MACHINE     IP      METADATA
# 36a636af... 10.0.0.4    region=us-east
# 40078616... 10.0.0.5    region=us-east
# f6ebd7d1... 10.0.2.4    region=us-east
</code></pre></div></div>

<p>Finally lets exit from the CoreOS cluster and install the local management tools</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>exit
</code></pre></div></div>

<h2 id="install-deis-control-utility">Install Deis Control Utility</h2>
<p>The Deis Control Utility, or <code class="language-plaintext highlighter-rouge">deisctl</code> for short, is a command-line client used to configure and manage the Deis Platform.</p>

<h3 id="building-from-installer">Building from Installer</h3>

<p>To install the latest version of deisctl, change to the directory where you would like to install the binary. Then, install the Deis Control Utility by downloading and running the install script with the following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir /tmp/deisctl
cd /tmp/deisctl
curl -sSL https://deis.io/deisctl/install.sh | sh -s 1.0.1
</code></pre></div></div>

<p>This installs deisctl to the current directory, and refreshes the Deis systemd unit files used to schedule the components. Link it to /usr/local/bin, so it will be in your PATH:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp /tmp/deisctl/deisctl /usr/local/bin/deisctl
</code></pre></div></div>

<p>Always use a version of deisctl that matches the Deis release. Verify this with <code class="language-plaintext highlighter-rouge">deisctl --version</code>.</p>

<h2 id="install-the-deis-platform">Install the Deis Platform</h2>

<p>Ensure your SSH agent is running and select the private key that corresponds to the SSH key added to your CoreOS nodes:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">eval</span> <span class="sb">`</span>ssh-agent <span class="nt">-s</span><span class="sb">`</span>
ssh-add ~/.ssh/deis
</code></pre></div></div>

<p>Export it to the DEISCTL_TUNNEL environment variable (substituting your own cloud app service name):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>export DEISCTL_TUNNEL="myapp-cloud-service-name.cloudapp.net"
</code></pre></div></div>

<p>This is the IP address where deisctl will attempt to communicate with the cluster. You can test that it is working properly by running deisctl list. If you see a single line of output, the control utility is communicating with the nodes.</p>

<p>Before provisioning the platform, we’ll need to add the SSH key to Deis so it can connect to remote hosts during deis run:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deisctl config platform set sshPrivateKey=~/.ssh/deis
</code></pre></div></div>

<p>We’ll also need to tell the controller which domain name we are deploying applications under:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deisctl config platform set domain=example.com
</code></pre></div></div>

<p>Once finished, run this command to provision the Deis platform:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deisctl install platform
</code></pre></div></div>

<p>You will see output like the following, which indicates that the units required to run Deis have been loaded on the CoreOS cluster:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>● ▴ ■
■ ● ▴ Installing Deis...
▴ ■ ●

Scheduling data containers...
...
Deis installed.
Please run `deisctl start platform` to boot up Deis.
</code></pre></div></div>

<p>Run this command to start the Deis platform:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deisctl start platform
</code></pre></div></div>

<p>Once you see “Deis started.”, your Deis platform is running on a cluster! You may verify that all of the Deis units are loaded and active by running the following command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>deisctl list
</code></pre></div></div>

<p>All of the units should be active.</p>

<p>Now that you’ve finished provisioning a cluster, we can get started using the platform.</p>

<h2 id="references">References</h2>

<ul>
  <li>https://azure.microsoft.com/en-us/documentation/articles/xplat-cli/</li>
  <li>https://coreos.com/docs/launching-containers/launching/fleet-using-the-client/</li>
  <li>https://coreos.com/docs/running-coreos/cloud-providers/azure/</li>
  <li>https://github.com/timfpark/coreos-azure</li>
  <li>https://docs.deis.io/en/latest/installing_deis/install-deisctl/</li>
  <li>https://docs.deis.io/en/latest/installing_deis/install-platform/</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>NodeJS on the Windows Azure Cloud, Start to Finish</title>
	  <link>/nodejs-on-the-windows-azure-cloud-start-to-finish</link>
	  <author>Jason Kulatunga</author>
	  <pubDate>2013-09-28T16:43:00-05:00</pubDate>
	  <guid>/nodejs-on-the-windows-azure-cloud-start-to-finish</guid>
	  <description><![CDATA[
	     <p>So you want to run nodejs on a linux image on Azure, easy right?
Well.. kinda..</p>

<h1 id="nodejs-on-the-windows-azure-cloud-start-to-finish">NodeJS on the Windows Azure Cloud, Start to Finish</h1>

<h2 id="remote-in">Remote In</h2>

<p>The first step to setting up your nodejs application is to remote into your linux image. I’ve taken the following steps from the great guide on <a href="https://www.windowsazure.com/en-us/manage/linux/how-to-guides/log-on-a-linux-vm/">windowsazure.com</a></p>

<p>For a virtual machine that is running the Linux operating system, you use a Secure Shell (SSH) client to logon.</p>

<p>You must install an SSH client on your computer that you want to use to log on to the virtual machine. There are many SSH client programs that you can choose from. The following are possible choices:</p>

<ul>
  <li>If you are using a computer that is running a Windows operating system, you might want to use an SSH client such as PuTTY. For more information, see the <a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/download.html">PuTTY Download Page</a>.</li>
  <li>If you are using a computer that is running a Linux operating system, you might want to use an SSH client such as OpenSSH. For more information, see <a href="https://www.openssh.org/">OpenSSH</a>.</li>
</ul>

<p>This procedure shows you how to use the PuTTY program to access the virtual machine.</p>

<ol>
  <li>Find the <strong>Host Name</strong> and <strong>Port information</strong> from the <a href="https://manage.windowsazure.com/">Management Portal</a>. You can find the information that you need from the dashboard of the virtual machine. Click the virtual machine name and look for the <strong>SSH Details</strong> in the <strong>Quick Glance</strong> section of the dashboard.</li>
  <li>Open the PuTTY program.</li>
  <li>Enter the Host Name and the Port information that you collected from the dashboard, and then click <strong>Open</strong>.</li>
  <li>Log on to the virtual machine using the account that you specified when the machine was created.</li>
</ol>

<h2 id="configuration--prerequisites">Configuration + Prerequisites</h2>

<p>If your coming from a non-unix background some of the following commands might be new to you.</p>

<ol>
  <li>
    <p>Setup your new <code class="language-plaintext highlighter-rouge">root</code> password</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">sudo </span>passwd root
 <span class="c"># Changing password for user root.</span>
 <span class="c"># New password:</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Change to the root account, enter the password you created for the <code class="language-plaintext highlighter-rouge">root</code> account previously</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> su -
 <span class="c"># Password:</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Update installed packages</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> yum <span class="nt">-y</span> update
</code></pre></div>    </div>
  </li>
  <li>
    <p>Install development packages</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> yum <span class="nb">install </span>kernel-headers <span class="nt">--disableexcludes</span><span class="o">=</span>all
 yum <span class="nb">install </span>gcc
 yum <span class="nb">install </span>gcc-c++
 yum <span class="nt">-y</span> groupinstall <span class="s2">"Development Tools"</span>
</code></pre></div>    </div>

    <p>Trying to install <code class="language-plaintext highlighter-rouge">gcc</code> or the <code class="language-plaintext highlighter-rouge">development tools</code> without installing the kernel-headers package will result in the helpful <code class="language-plaintext highlighter-rouge">gcc (updates) Requires: kernel-headers</code> error. Note the <code class="language-plaintext highlighter-rouge">development tools</code> command produced a single error for me, but everything else still worked.</p>
  </li>
  <li>
    <p>Install OpenSSL</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> yum install openssl-devel
</code></pre></div>    </div>
  </li>
  <li>
    <p>Download and extract NodeJS</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">cd</span> /usr/src
 wget https://nodejs.org/dist/node-latest.tar.gz
 <span class="nb">tar </span>zxvf node-latest.tar.gz
</code></pre></div>    </div>
  </li>
  <li>
    <p>Change working directory into the extracted folder:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> cd node-v0.10.3
</code></pre></div>    </div>
  </li>
  <li>
    <p>Install NodeJS</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ./configure
 make
 make <span class="nb">install</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Verify installation</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> node <span class="nt">-v</span>
 npm <span class="nt">-v</span>
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="setup-git">Setup Git</h2>

<ol>
  <li>
    <p>Install git. Unfortunately the version of git accessible by <code class="language-plaintext highlighter-rouge">yum</code> is out of date. So you can’t do:</p>

    <strike>yum install git</strike>

    <p>Its ok though, we can just build it from source. I’ve tried few methods, most of them from this <a href="https://stackoverflow.com/questions/3779274/how-can-git-be-installed-on-centos-5-5">SO question</a> but most of them failed on my CentOs, either because of the wrong repos or missing files.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> yum <span class="nt">-y</span> <span class="nb">install </span>zlib-devel openssl-devel cpio expat-devel gettext-devel
 wget https://git-core.googlecode.com/files/git-1.8.4.tar.gz
 <span class="nb">tar</span> <span class="nt">-xzvf</span> ./git-1.8.4.tar.gz
 <span class="nb">cd</span> ./git-1.8.4
 ./configure
 make
 make <span class="nb">install</span>
</code></pre></div>    </div>

    <p>You may want to download a different version from here: <a href="http://code.google.com/p/git-core/downloads/list">https://code.google.com/p/git-core/downloads/list</a></p>
  </li>
</ol>

<h2 id="setup-github-ssh-key">Setup Github SSH Key</h2>
<p>The following instructions were taken from the <a href="https://help.github.com/articles/generating-ssh-keys">Generating SSH Keys</a> page on Github</p>

<ol>
  <li>
    <p>Check for existing SSH keys</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="nb">cd</span> ~/.ssh
 <span class="nb">ls</span>
 <span class="c"># Lists the files in your .ssh directory</span>
</code></pre></div>    </div>

    <p>Check the directory listing to see if you have a file named either <code class="language-plaintext highlighter-rouge">id_rsa.pub</code> or <code class="language-plaintext highlighter-rouge">id_dsa.pub</code>. If you don’t have either of those files go to <strong>step 2</strong>. Otherwise, you already have an existing keypair, and you can skip to <strong>step 3</strong>.</p>
  </li>
  <li>
    <p>Generate a new SSH key</p>

    <p>To generate a new SSH key, enter the code below. We want the default settings so when asked to enter a file in which to save the key, just press enter.</p>

    <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-C</span> <span class="s2">"your_email@example.com"</span>
 // Creates a new ssh key, using the provided email as a label
 <span class="c"># Generating public/private rsa key pair.</span>
 <span class="c"># Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</span>
 ssh-add id_rsa
</code></pre></div>    </div>

    <p>Now you need to enter a passphrase.</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> # Enter passphrase (empty for no passphrase): [Type a passphrase]
 # Enter same passphrase again: [Type passphrase again]
</code></pre></div>    </div>

    <p>Which should give you something like this:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> # Your identification has been saved in /c/Users/you/.ssh/id_rsa.
 # Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.
 # The key fingerprint is:
 # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com
</code></pre></div>    </div>
  </li>
  <li>
    <p>Add your SSH key to GitHub</p>

    <p>Run the following code to view your public key.</p>

    <p><!-- code[bash] --></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> cat ~/.ssh/id_rsa.pub
</code></pre></div>    </div>

    <p>Copy and paste the output of the cat command into the <a href="https://github.com/settings/ssh">Add SSH Key</a> window.</p>
  </li>
  <li>
    <p>Test your key on Github</p>

    <p><!-- code[bash] --></p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> ssh -T git@github.com
 // Attempts to ssh to github
 # The authenticity of host 'github.com (207.97.227.239)' can't be established.
 # RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
 # Are you sure you want to continue connecting (yes/no)?
 # yes
 # Hi AnalogJ! You've successfully authenticated, but GitHub does not provide shell access.
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="clone-your-github-repo">Clone your Git(Hub) Repo</h2>
<p>Create your (web) application directory and clone project</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd /srv
mkdir www
cd www
git clone git@github.com:AnalogJ/docker-node-hello.git hello
cd hello
make install
make run
</code></pre></div></div>

<h2 id="open-up-firewall">Open up Firewall</h2>

<p>Firewalled ports can only be opened by configuring them in the management console in Azure.
You can click find the full guide on <a href="http://www.windowsazure.com/en-us/manage/windows/how-to-guides/setup-endpoints/">setting up your azure endpoints</a></p>

<ol>
  <li>
    <p>If you have not already done so, sign in to the Windows Azure Management Portal.</p>
  </li>
  <li>
    <p>Click <strong>Virtual Machines</strong>, and then select the virtual machine that you want to configure.</p>
  </li>
  <li>
    <p>Click <strong>Endpoints</strong>. The Endpoints page lists all endpoints for the virtual machine.</p>
  </li>
  <li>
    <p>Click <strong>Add</strong>.</p>
  </li>
</ol>

<p>The Add Endpoint dialog box appears. Choose whether to add the endpoint to a load-balanced set and then click the arrow to continue.</p>

<ol>
  <li>
    <p>In <strong>Name</strong>, type a name for the endpoint.</p>
  </li>
  <li>
    <p>In protocol, specify either <strong>TCP</strong> or <strong>UDP</strong>.</p>
  </li>
  <li>
    <p>In <strong>Public Port</strong> and <strong>Private Port</strong>, type port numbers that you want to use. These port numbers can be different. The public port is the entry point for communication from outside of Windows Azure and is used by the Windows Azure load balancer. You can use the private port and firewall rules on the virtual machine to redirect traffic in a way that is appropriate for your application.</p>
  </li>
  <li>
    <p>Click <strong>Create a load-balancing set</strong> if this endpoint will be the first one in a load-balanced set. Then, on the <strong>Configure the load-balanced set</strong> page, specify a name, protocol, and probe details. Load-balanced sets require a probe so the health of the set can be monitored. For more information, see <a href="http://www.windowsazure.com/en-us/manage/windows/common-tasks/how-to-load-balance-virtual-machines/">Load Balancing Virtual Machines</a>.</p>
  </li>
  <li>
    <p>Click the check mark to create the endpoint.</p>
  </li>
</ol>

<p>You will now see the endpoint listed on the Endpoints page.</p>


	  ]]></description>
	</item>


</channel>
</rss>
